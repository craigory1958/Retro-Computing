     1:                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2:                    ;                                                                              ;
     3:                    ;                      Virtual Memory Kernal (VMK) v0.0.1                      ;
     4:                    ;                                                                              ;
     5:                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     6:                    
    13:                    
    14:                                           .__cpu_declare_type  MOS6502, list=.list
 B  21:                                               .ifndef _cpu_declared
 B  22:                    _cpu_declared                  .equ     1
 B  23:                    
 B  24:                                                   .if 1 == MOS6502
 B  25:                                                       .include "../CPUs/MOS6502.lib.a65"
 F   1:                    ;
 F   2:                    ; MOS6502 Definitions
 F   3:                    ;
 F   4:                    
 F   5:                                           .segment "_MOS6502_zp"
 F   6:  0000              _MOS6502_zp            .org     0x0000         ; 1st 256 bytes of memory
 F   7:                    _MOS6502_zp_           .equ     * +0xFF
 F   8:                    
 F   9:                                           .segment "_MOS6502_stack"
 F  10:  0000              _MOS6502_stack         .org     0x0100         ; 2nd 256 bytes of memory
 F  11:                    _MOS6502_stack_        .equ     * +0xFF
 F  12:                    
 F  13:                                           .segment "_MOS6502_vectors"
 F  14:  0000              _MOS6502_vectors       .org     0xFFFA         ; MOS6502 Interrupt Vectors
 F  15:                    _MOS6502_vectors_      .equ     * +0x05
 F  16:                    
 B  26:                                                   .endif
 B  27:                    
 B  28:                                                   .if 1 == W65C02
 B  29:                                                       .include "../CPUs/W65C02.lib.a65"
 B  30:                                                   .endif
 B  31:                                               .endif
    15:                                           .__arch_declare_type SBC6502v1_8K, list=.list
 C  16:                                               .ifndef _arch_declared
 C  17:                    _arch_declared                 .equ     1
 C  18:                    
 C  19:                                                   .if 1 == SBC6502v1_8K
 C  20:                                                       .include "../archs/SBC6502v1_8K.lib.a65"
 H   1:                    ;
 H   2:                    ; SBC6502 (8K ROM) Definitions
 H   3:                    ;
 H   4:                    
 H   5:                                           .segment "_SBC6502_code"
 H   6:  0000              _SBC6502_code          .org     0x0200
 H   7:                    
 H   8:                                           .segment "_SBC6502_io"
 H   9:  0000              _SBC6502_io            .org     0x1000
 H  10:                    
 C  21:                                                   .endif
 C  22:                                               .endif
    16:                                           .__mmu_declare_type  MMUv1, list=.list
 D  16:                                               .ifndef _mmu_declared
 D  17:                    _mmu_declared                  .equ    1
 D  18:                    
 D  19:                                                   .if 1 == MMUv1
 D  20:                                                       .include "../devices/MMUs/MMUv1.lib.a65"
 J   1:                    ;
 J   2:                    ; Memory Managment Unit (MMU) Definitions
 J   3:                    ;
 J   4:                    
 J   5:                    __mmu_instantiate      .macro  numBitsPID, numBitsVirtualAddr, numBitsPhysicalAddr, numBitsSegmentOffset
 J   6:                     
 J   7:                    _mmu_NumBitsPID            .equ    ${numBitsPID}
 J   8:                    _mmu_NumBitsVirtualAddr    .equ    ${numBitsVirtualAddr}
 J   9:                    _mmu_NumBitsPhysicalAddr   .equ    ${numBitsPhysicalAddr}
 J  10:                    _mmu_NumBitsSegmentOffset  .equ    ${numBitsSegmentOffset}
 J  11:                    
 J  12:                    _mmu_NumBitsSegmentTag     .equ    ${numBitsPhysicalAddr} - ${numBitsSegmentOffset}
 J  13:                    _mmu_NumSegmentTags        .equ    1 << _mmu_NumBitsSegmentTag + ${numBitsPID}
 J  14:                    _mmu_ConfigValue           .equ    (${numBitsPID} << 6) ! ((${numBitsVirtualAddr} - ${numBitsPhysicalAddr}) << 3) ! ((${numBitsSegmentOffset} -8) << 0)
 J  15:                    
 J  16:                    
 J  17:                                           .segment "_SBC6502_io"
 J  18:                    _mmu
 J  19:                    _mmu_R0                .byte    0x00        ; Control Register
 J  20:                    _mmu_R1                .byte    0x00        ; Configuration Register        
 J  21:                    
 J  22:                    _mmu_vectors           .align   0x04 
 J  23:                    _mmu_vectors_          .org    * + (_mmu_NumBitsSegmentTag << 1)    ; Allocate 2 bytes for each vector.
 J  24:                    _mmu_
 J  25:                     
 J  26:                     
 J  27:                                           .segment "_MOS6502_zp"
 J  28:                        _mmu_parms
 J  29:                        _mmu_parms_pid         .byte   0x00
 J  30:                        _mmu_parms_addr        .word   0x0000
 J  31:                        _mmu_parms_effect_addr .word   0x0000
 J  32:                        _mmu_parms_
 J  33:                                        
 J  34:                    
 J  35:                                           .segment "_SBC6502_code"
 J  36:                                            ; Initialize MMU...
 J  37:                        _mmu_initialize
 J  38:                                            LDA     #0x00            ; Set boot mode (should already be in boot mode after hardware reset.)
 J  39:                                            STA     _mmu_R0
 J  40:                            
 J  41:                                            LDA     #_mmu_ConfigValue
 J  42:                    
 J  43:                                            STA     _mmu_R1
 J  44:                            
 J  45:                                            ; Clear segment vectors...
 J  46:                    
 J  47:                                            LDA     #0x00
 J  48:                                            LDX     #_mmu_NumSegmentTags
 J  49:                        loop
 J  50:                                            STA     _mmu_vectors, X
 J  51:                                            DEX
 J  52:                                            STA     _mmu_vectors, X
 J  53:                                            DEX
 J  54:                                            BNE     loop
 J  55:                                            RTS        
 J  56:                    
 J  57:                        _mmu_map_segment
 J  58:                                            RTS
 J  59:                                       .endmacro
 J  60:                    
 J  61:                    
 J  62:                    
 J  63:                    __mmu_map_segment      .macro  pid, physicalAddress, effectiveAddress
 J  64:                    
 J  65:                                           .segment "_MOS6502_code"
 J  66:                    
 J  67:                                            LDA     #${pid}
 J  68:                                            STA     _mmu_parms_pid
 J  69:                                            
 J  70:                                            LDA     #<${physicalAddress}
 J  71:                                            STA     _mmu_parms_addr
 J  72:                                            LDA     #>${physicalAddress}
 J  73:                                            STA     _mmu_parms_addr +1
 J  74:                                            
 J  75:                                            LDA     #<${effectiveAddress}     
 J  76:                                            STA     _mmu_parms_effect_addr
 J  77:                                            LDA     #>${effectiveAddress}
 J  78:                                            STA     _mmu_parms_effect_addr +1
 J  79:                                             
 J  80:                                            JSR     _mmu_map_segment
 J  81:                                       .endmacro
 J  82:                    
 D  21:                                                   .endif
 D  22:                                               .endif
    17:                    
    18:                    
    19:                    ;
    20:                    ; Memory Management Unit (MMU) Configutation
    21:                    ;
    22:                    
    23:                                            ; 2 PID Bits, 20 Virtual Address Bits, 10 Segment Offset Bits
    24:                    
    25:                    bitsPID                .equ    2                   ; Kernal = 0, User = 01 thru 11
    26:                    bitsVirtualAddr        .equ    20                  ; SBC6502 with 20 bit virtual address bus
    27:                    bitsPhysicalAddr       .equ    16                  ; MCS650X with 16 bit address bus
    28:                    bitsSegmentOffset      .equ    10                  ; SBC6502 with 10 bit segment size
    29:                    
    30:                                           .__mmu_instantiate   bitsPID, bitsVirtualAddr, bitsPhysicalAddr, bitsSegmentOffset, list=.list
 J  59:                    
 J  60:                    _mmu_NumBitsPID            .equ    2
 J  61:                    _mmu_NumBitsVirtualAddr    .equ    20
 J  62:                    _mmu_NumBitsPhysicalAddr   .equ    16
 J  63:                    _mmu_NumBitsSegmentOffset  .equ    10
 J  64:                    
 J  65:                    _mmu_NumBitsSegmentTag     .equ    16 - 10
 J  66:                    _mmu_NumSegmentTags        .equ    1 << _mmu_NumBitsSegmentTag + 2
 J  67:                    _mmu_ConfigValue           .equ    (2 << 6) ! ((20 - 16) << 3) ! ((10 -8) << 0)
 J  68:                    
 J  69:                    
 J  70:                                           .segment "_SBC6502_io"
 J  71:  1000              _mmu
 J  72:  1000 00           _mmu_R0                .byte    0x00        ; Control Register
 J  73:  1001 00           _mmu_R1                .byte    0x00        ; Configuration Register
 J  74:                    
 J  75:  1002              _mmu_vectors           .align   0x04
 J  76:  0004              _mmu_vectors_          .org    * + (_mmu_NumBitsSegmentTag << 1)    ; Allocate 2 bytes for each vector.
 J  77:  0010              _mmu_
 J  78:                    
 J  79:                    
 J  80:                                           .segment "_MOS6502_zp"
 J  81:  0000                  _mmu_parms
 J  82:  0000 00               _mmu_parms_pid         .byte   0x00
 J  83:  0001 00 00            _mmu_parms_addr        .word   0x0000
 J  84:  0003 00 00            _mmu_parms_effect_addr .word   0x0000
 J  85:  0005                  _mmu_parms_
 J  86:                    
 J  87:                    
 J  88:                                           .segment "_SBC6502_code"
 J  89:                                            ; Initialize MMU...
 J  90:  0200                  _mmu_initialize
 J  91:  0200 A9 00                                LDA     #0x00            ; Set boot mode (should already be in boot mode after hardware reset.)
 J  92:  0202 8D 00 10                             STA     _mmu_R0
 J  93:                    
 J  94:  0205 A9 80                                LDA     #_mmu_ConfigValue
 J  95:                    
 J  96:  0207 8D 01 10                             STA     _mmu_R1
 J  97:                    
 J  98:                                            ; Clear segment vectors...
 J  99:                    
 J 100:  020A A9 00                                LDA     #0x00
 J 101:  020C A2 00                                LDX     #_mmu_NumSegmentTags
 J 102:  020E                  loop
 J 103:  020E 9D 02 10                             STA     _mmu_vectors, X
 J 104:  0211 CA                                   DEX
 J 105:  0212 9D 02 10                             STA     _mmu_vectors, X
 J 106:  0215 CA                                   DEX
 J 107:  0216 D0 F6                                BNE     loop
 J 108:  0218 60                                   RTS
 J 109:                    
 J 110:  0219                  _mmu_map_segment
 J 111:  0219 60                                   RTS
    31:                    
    32:                    ;
    33:                    ; SBC6500 Initialization (Power-Up and Reset (RST))
    34:                    ;
    35:                                           .segment "_SBC6502_code"
    36:                    
    37:  021A              VMK_RESET
    38:  021A A2 FF                                LDX     #0xFF        ; Initialize stack pointer
    39:  021C 9A                                   TXS
    40:                    
    41:  021D 20 00 02                             JSR     _mmu_initialize
    42:                    
    43:                    ; Allowcate SBC6502 segment vectors for kernal ...
    44:                    
    45:                    ;      Tag        Physical Address         Effective Address
    46:                    ;    xx00.0000 - 0000.00xx.xxxx.xxxx -> 0000.0000.00xx.xxxx.xxxx - RAM (ZP & Stack & RAM)
    47:                    ;    xx00.0001 - 0000.01xx.xxxx.xxxx -> 1110.1111.10xx.xxxx.xxxx - IO
    48:                    ;    xx00.0010 - 0000.10xx.xxxx.xxxx -> 1111.1111.00xx.xxxx.xxxx - ROM
    49:                    ;    xx00.0011 - 0000.11xx.xxxx.xxxx -> 1111.1111.01xx.xxxx.xxxx - ROM
    50:                    ;    xx00.0100 - 0001.00xx.xxxx.xxxx -> 1111.1111.10xx.xxxx.xxxx - ROM
    51:                    ;    xx00.0101 - 0001.01xx.xxxx.xxxx -> 1111.1111.11xx.xxxx.xxxx - ROM
    52:                    
    53:                    ;                       .__mmu_map_segment   _vmk_kernal_pid, _SBC6502_ram, _SBC6502_effect_ram
    54:                    
    55:                    ;                       .__mmu_map_segment   _vmk_kernal_pid, _SBC6502_io, _SBC6502_effect_IO
    56:                    
    57:                    ;                       .__mmu_map_segment   _vmk_kernal_pid, _SBC6502_rom, _SBC6502_effect_rom
    58:                    
    59:                    ;
    60:                    ; VMK Kernal
    61:                    ;
    62:                    
    63:  0220              VMK_KERNAL
    64:  0220 4C 20 02                             JMP     VMK_KERNAL
    65:                    
    66:                    ;
    67:                    ; MCS650X Interupt Vectors
    68:                    ;
    69:                                           .segment "_MOS6502_vectors"
    70:                    
    71:  FFFA                  MCS650X_INTERRUPT_VECTORS
    72:                    
    73:  FFFA 00 00            MCS650X_NMI        .word   0x0000
    74:  FFFC 1A 02            MCS650X_RST        .word   VMK_RESET
    75:  FFFE 00 00            MCS650X_IRQ        .word   0x0000
    76:                    
    77:  10000                  MCS650X_INTERRUPT_VECTORS_
    78:                    
    79:                                       .end
    80:                    
