          1:                    
          2:                    
          3:                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
          4:                    ;                                                                               ;
          5:                    ;                          Virtual Memory Kernal (VMK)                          ;
          6:                    ;                                                                               ;
          7:                    ;       Version: v0.0.1                                                         ;
          8:                    ;       Author: Craig Gregory (CJG)                                             ;
          9:                    ;                                                                               ;
         10:                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
         11:                    
         12:                    ;   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
         13:                    
         14:                                               .include     "VMK.def.a65", as=.VMK
         15:                                               .include     "../CPUs/_CPU.def.a65", as=.CPU
         16:                                               .include     "../archs/_ARCH.def.a65", as=.ARCH
         17:                                               .include     "../devices/MMUs/_MMU.def.a65", as=.MMU
         18:                    
         19:                                                   .VMK:.declare_type   .VMK:v1
         20:                                                   .CPU:.declare_type   .CPU:MOS6502
         21:                                                   .ARCH:.declare_type  .ARCH:ROM4k_v1
         22:                                                   .MMU:.declare_type   .MMU:v1
         23:                    
         24:                    
         25:                    ;
         26:                    ; Memory Management Unit (MMU) Configutation
         27:                    ;
         28:                    
         29:                           ; 2 PID Bits, 20 Effective Address Bits, 10 Segment Offset Bits
         30:                    
         31:                    ;   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
         32:                    
         33: (0010)                     bitsPhysicalAddr       .equ     16          ; MPU65XX with 16 bit address bus (65536)
         34: (0014)                     bitsEffectiveAddr      .equ     20          ; SBC6502 with 20 bit effective address bus (1,048,576)
         35: (000A)                     bitsSegmentSize        .equ     10          ; SBC6502 with 10 bit segment size (1024)
         36: (0002)                     bitsPID                .equ     2           ; Kernal = 0x0, User = 0x1 thru 0x2
         37:                    
         38:                                                   .MMU:.instantiate    bitsPhysicalAddr, bitsEffectiveAddr, bitsSegmentSize, bitsPID, list=.list
 L.143   39:                    
 L.144   40: (0010)                     bitsPhysicalAddr       .equ     0x10
 L.145   41: (0014)                     bitsEffectiveAddr      .equ     0x14
 L.146   42: (000A)                     bitsSegmentSize        .equ     0x0A
 L.147   43: (0002)                     bitsPID                .equ     0x02
 L.148   44:                    
 L.149   45: (0006)                     bitsSegmentAddr        .equ     bitsPhysicalAddr - bitsSegmentSize
 L.150   46: (0100)                     numVectors             .equ     1 << bitsSegmentAddr + 0x02
 L.151   47: (0080)                     configValue            .equ     (bitsPID << 6) ! ((bitsEffectiveAddr - bitsPhysicalAddr) << 3) ! ((bitsSegmentSize -8) << 0)
 L.152   48:                    
 L.153   49:                    
 L.154   50:                                               .segment     "_SBC6502_IO"
 L.155   51:  A000                  mmu
 L.156   52:                    
 L.157   53:                            ;
 L.158   54:                            ;   R0 - Mode Register
 L.159   55:                            ;
 L.160   56:                            ;   ┌─┬─┬───────────┐
 L.161   57:                            ;   │7 6 5 4 3 2 1 0│
 L.162   58:                            ;   └┬┴┬┴─────┬─────┘
 L.163   59:                            ;    │ │      └───────┤ PID (1-6 bits)
 L.164   60:                            ;    │ │
 L.165   61:                            ;    │ └──────────────┤ ~Kernal Mode (0 is enabled) / User Mode (1 is enabled)
 L.166   62:                            ;    │
 L.167   63:                            ;    └────────────────┤ ~Boot Mode (0 is enabled) / Address Translate Mode (1 is enanled)
 L.168   64:                    
 L.169   65:  A000 00                   R0                     .byte    0x00    ; Mode Register
 L.170   66:                    
 L.171   67:                    ;
 L.172   68:                    ;   R1 - Status Register
 L.173   69:                    ;
 L.174   70:                    ;   ┌─┬─┬─┬─┬─┬─┬─┬─┐
 L.175   71:                    ;   │7 6 5 4 3 2 1 0│
 L.176   72:                    ;   └┬┴┬┴┬┴┬┴┬┴┬┴┬┴┬┘
 L.177   73:                    ;    │ │ │ │ │ │ │ └──┤ Boot Address Error
 L.178   74:                    
 L.179   75:  A001 00           R1                    .byte    0x00         ; Status Register
 L.180   76:                    
 L.181   77:                    ;
 L.182   78:                    ;   CR0 - Config Register 0
 L.183   79:                    ;
 L.184   80:                    ;   ┌───────┬───────┐
 L.185   81:                    ;   │7 6 5 4 3 2 1 0│
 L.186   82:                    ;   └───┬───┴───┬───┘
 L.187   83:                    ;       │       └─────┤ # Page Offset Bits (0-15 bits)
 L.188   84:                    ;       │
 L.189   85:                    ;       └─────────────┤ # Page Segment Bits (0-15 bits)
 L.190   86:                    
 L.191   87:  A002 00           CR0                   .byte    0x00         ; Config Register 0
 L.192   88:                    
 L.193   89:                    ;
 L.194   90:                    ;   CR1 - Config Register 1
 L.195   91:                    ;
 L.196   92:                    ;   ┌───────────────┐
 L.197   93:                    ;   │7 6 5 4 3 2 1 0│
 L.198   94:                    ;   └──┬──┴────┬────┘
 L.199   95:                    ;      │       └──────┤ # Effective Address Bits (0-31 bits)
 L.200   96:                    ;      │
 L.201   97:                    ;      └──────────────┤ # PID Bits (0-6 bits)
 L.202   98:                    
 L.203   99:  A003 00           CR1                   .byte    0x00         ; Config Register 1
 L.204  100:                    
 L.205  101:                    ;
 L.206  102:                    ;   MVR(s) - Memory Vector Register(s)
 L.207  103:                    ;
 L.208  104:                    ;                   ┌───────────────┐
 L.209  105:                    ;                   │7 6 5 4 3 2 1 0│─┤ MVR low
 L.210  106:                    ;                   └───────────────┘
 L.211  107:                    ;                   .               .
 L.212  108:                    ;   ┌───────────────┐               .
 L.213  109:                    ;   │7 6 5 4 3 2 1 0│─────────────────┤ MVR high
 L.214  110:                    ;   └───────────────┘               .
 L.215  111:                    ;   .               .               .
 L.216  112:                    ;   ┌─┬─┬─┬─────────────────────────┐
 L.217  113:                    ;   │5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0│
 L.218  114:                    ;   └┬┴┬┴┬┴────────────┬────────────┘
 L.219  115:                    ;    │ │ │             └──────────────┤ Upper Effective Address Bits (0-13 bits)
 L.220  116:                    ;    │ │ │
 L.221  117:                    ;    │ │ └────────────────────────────┤ Page Dirty
 L.222  118:                    ;    │ │
 L.223  119:                    ;    │ └──────────────────────────────┤ Write Enable
 L.224  120:                    ;    │
 L.225  121:                    ;    └────────────────────────────────┤ Vector Enable
 L.226  122:                    
 L.227  123:                                                   .align       0x10
 L.228  124:  A010                      vectors
 L.229  125:                                                   .org         * + (numVectors << 1)    ; Allocate 2 bytes for each vector.
 L.230  126:  A210                      vectors_
 L.231  127:  A210                  mmu_
 L.232  128:                    
 L.233  129:                    ;   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
 L.234  130:                    
 L.235  131:                                               .segment     "_SBC6502_CODE"
 L.236  132:                    
 L.237  133:  E000                      initialize
 L.238  134:  E000 A9 00                                        LDA     #0x00    ; Set boot mode (should already be in boot mode after hardware reset.)
 L.239  135:  E002 8D 00 A0                                     STA     R0
 L.240  136:                    
 L.241  137:  E005 A9 80                                        LDA     #configValue
 L.242  138:                    
 L.243  139:  E007 8D 01 A0                                     STA     R1
 L.244  140:                    
 L.245  141:                            ; Reset segment vectors ...
 L.246  142:                    
 L.247  143:  E00A A9 00                                        LDA     #0x00
 L.248  144:  E00C A2 00                                        LDX     #numVectors
 L.249  145:  E00E                          @loop
 L.250  146:  E00E 9D 10 A0                                     STA     vectors, X    ; Only need to clear 2 highest bits of a segment vector.
 L.251  147:  E011 CA                                           DEX
 L.252  148:  E012 CA                                           DEX
 L.253  149:  E013 D0 F9                                        BNE     @loop
 L.254  150:                    
 L.255  151:  E015 60                                           RTS
 L.256  152:                    
 L.257  153:                    
 L.258  154:  E016                      timer_initialize
 L.259  155:  E016 60                                           RTS
 L.260  156:                    
 L.261  157:                    
 L.262  158:  E017                      map_segment
 L.263  159:  E017 60                                           RTS
 L.264  160:                    
        161:                    
        162:                    ;
        163:                    ; SBC6502 Initialization (Power-Up and uP Reset (RST))
        164:                    ;
        165:                    ;   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
        166:                    
        167:                                               .segment     "_SBC6502_CODE"
        168:                    
        169:  E018              _MPU65XX_RESET
        170:                    ;   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
        171:                    
        172:  E018 78                                           SEI                 ; Disable interrupts when entered via code
        173:  E019 A2 FF                                        LDX     #0xFF       ; Initialize stack pointer
        174:  E01B 9A                                           TXS
        175:                    
        176:  E01C 20 00 E0                                     JSR     .MMU:initialize
        177:                    
        178:                    
        179:                    ; Allowcate SBC6502 segment vectors for kernal ...
        180:                    
        181:                    ;      Tag        Physical Address         Effective Address
        182:                    ;    x00.0000 - 0000.00xx.xxxx.xxxx -> 0000.0000.00xx.xxxx.xxxx - RAM (ZP & Stack & RAM) (1Kb)
        183:                    ;    x00.0001 - 0000.01xx.xxxx.xxxx -> 1110.1111.10xx.xxxx.xxxx - IO (1Kb)
        184:                    ;    x00.0010 - 0000.10xx.xxxx.xxxx -> 1111.1111.00xx.xxxx.xxxx - ROM (1Kb)
        185:                    ;    x00.0011 - 0000.10xx.xxxx.xxxx -> 1111.1111.00xx.xxxx.xxxx - ROM (1Kb)
        186:                    ;    x00.0100 - 0000.10xx.xxxx.xxxx -> 1111.1111.00xx.xxxx.xxxx - ROM (1Kb)
        187:                    ;    x00.0101 - 0000.10xx.xxxx.xxxx -> 1111.1111.00xx.xxxx.xxxx - ROM (1Kb)
        188:                    
        189:                    ;   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
        190:                    
        191:                                                   .MMU:.map_segment     .VMK:kernal_pid, .ARCH:_SBC6502_RAM, .ARCH:_SBC6502_eRAM, list=.list
 M.170  192:                    
 M.171  193:                                           .segment "_SBC6502_CODE"
 M.172  194:                    
 M.173  195:  E01F A9 00                                    LDA     #0x00
 M.174  196:  E021 85 00                                    STA     map_segment_args:pid
 M.175  197:                    
 M.176  198:  E023 A9 00                                    LDA     #<0x00
 M.177  199:  E025 85 01                                    STA     map_segment_args:addr
 M.178  200:  E027 A9 00                                    LDA     #>0x00
 M.179  201:  E029 85 02                                    STA     map_segment_args:addr +1
 M.180  202:                    
 M.181  203:  E02B A9 00                                    LDA     #<0x00
 M.182  204:  E02D 85 03                                    STA     map_segment_args:effect_addr
 M.183  205:  E02F A9 00                                    LDA     #>0x00
 M.184  206:  E031 85 04                                    STA     map_segment_args:effect_addr +1
 M.185  207:                    
 M.186  208:  E033 20 17 E0                                 JSR     map_segment
 M.187  209:                    
        210:                    
        211:                    ;                               .MMU:.map_segment     .VMK:kernal_pid, _SBC6502_IO, _SBC6502_eio
        212:                    
        213:                    ;                               .MMU:.map_segment     .VMK:kernal_pid, _SBC6502_ROM + (1 << bitsSegmentSize) *0, _SBC6502_eROM + (1 << bitsSegmentSize) *0
        214:                    
        215:                    ;                               .MMU:.map_segment     .VMK:kernal_pid, _SBC6502_ROM + (1 << bitsSegmentSize) *1, _SBC6502_eROM + (1 << bitsSegmentSize) *1
        216:                    
        217:                    ;                               .MMU:.map_segment     .VMK:kernal_pid, _SBC6502_ROM + (1 << bitsSegmentSize) *2, _SBC6502_eROM + (1 << bitsSegmentSize) *2
        218:                    
        219:                    ;                               .MMU:.map_segment     .VMK:kernal_pid, _SBC6502_ROM + (1 << bitsSegmentSize) *3, _SBC6502_eROM + (1 << bitsSegmentSize) *3
        220:                    
        221: (0007)                     curTaskSegment         .equ     0x07
        222:                    
        223:                    ;
        224:                    ; VMK Kernal
        225:                    ;
        226:                    ;   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
        227:                    
        228:                                               .segment     "_MPU65XX_ZP"
        229:                    
        230:  0005                      task                   .word
        231:  0005                      tasks                  .word
        232:  0005                      curTask                .word
        233:  0005                      curTaskRegY            .byte
        234:                    
        235:                    ;
        236:                    ; Routine for BRK or IRQ event; BRK instruction will set Break bit.
        237:                    ;
        238:                    
        239:                                               .segment     "_SBC6502_CODE"
        240:  E036              _MPU65XX_IRQ
        241:  E036              _MPU65XX_BRK
        242:                    
        243:                            ; Save current task state.
        244:                    
        245:  E036 84 05                                        STY     curTaskRegY
        246:  E038 A0 00                                        LDY     #0x00
        247:  E03A 91 05                                        STA     [curTask], Y    ; Save A
        248:  E03C A5 05                                        LDA     curTaskRegY
        249:  E03E C8                                           INY
        250:  E03F 91 05                                        STA     [curTask], Y    ; Save Y
        251:  E041 8A                                           TXA
        252:  E042 C8                                           INY
        253:  E043 91 05                                        STA     [curTask], Y    ; Save X
        254:  E045 BA                                           TSX
        255:  E046 8A                                           TXA
        256:  E047 C8                                           INY
        257:  E048 91 05                                        STA     [curTask], Y    ; Save S
        258:                    
        259:  E04A AA                                           TAX
        260:  E04B CA                                           DEX
        261:  E04C BD 00 1D                                     LDA     (curTaskSegment <<  bitsSegmentSize) + 0x0100, X    ; Use X as stack pointer into current task's stack
        262:  E04F C8                                           INY
        263:  E050 91 05                                        STA     [curTask], Y    ; Save P
        264:  E052 CA                                           DEX
        265:  E053 BD 00 1D                                     LDA     (curTaskSegment <<  bitsSegmentSize) + 0x0100, X
        266:  E056 C8                                           INY
        267:  E057 91 05                                        STA     [curTask], Y    ; Save PCL
        268:  E059 CA                                           DEX
        269:  E05A BD 00 1D                                     LDA     (curTaskSegment <<  bitsSegmentSize) + 0x0100, X
        270:  E05D C8                                           INY
        271:  E05E 91 05                                        STA     [curTask], Y    ; Save PCH
        272:                    
        273:                    
        274:                            ; Find next task to execute.
        275:                    
        276:  E060 A5 05                                        LDA     tasks
        277:  E062 F0 1C                                        BEQ     Error       ; Error is tasks list structure
        278:  E064 85 05                                        STA     task
        279:  E066 A5 06                                        LDA     tasks +1
        280:  E068 85 06                                        STA     task +1
        281:                    
        282:  E06A                      CheckNextTaskStatus
        283:  E06A A0 00                                        LDY     #0x00
        284:  E06C B1 05                                        LDA     [task], Y   ; Fetch status byte of next task
        285:  E06E 29 01                                        AND     #0x01
        286:  E070 D0 0E                                        BNE     ExecuteNextTask     ; Found next task to execute
        287:                    
        288:  E072 B1 05                                        LDA     [task], Y   ; Fetch pointer to next tasks in list
        289:  E074 F0 0A                                        BEQ     Error       ; Error is tasks list structure
        290:  E076 85 05                                        STA     task
        291:  E078 C8                                           INY
        292:  E079 B1 05                                        LDA     [task], Y   ; Fetch pointer to next tasks in list
        293:  E07B 85 06                                        STA     task +1
        294:                    
        295:  E07D 4C 6A E0                                     JMP     CheckNextTaskStatus
        296:                    
        297:                    
        298:                    
        299:  E080                      ExecuteNextTask
        300:  E080                      Error
        301:                    
        302:  E080 40                                           RTI
        303:                    
        304:  E081              _MPU65XX_NMI
        305:  E081 40                                           RTI
        306:                    
        307:                    
        308:                                               .include "../CPUs/MOS6502_Vectors.lib.a65", list=.list
  P.01  309:                    
  P.02  310:                    
  P.03  311:                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  P.04  312:                    ;                                                                               ;
  P.05  313:                    ;                MOS6502 Family uP (MPU65XX) Vectors for MOS6502                ;
  P.06  314:                    ;                                                                               ;
  P.07  315:                    ;       Version: v1.0.0                                                         ;
  P.08  316:                    ;       Author: Craig Gregory (CJG)                                             ;
  P.09  317:                    ;                                                                               ;
  P.10  318:                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  P.11  319:                    
  P.12  320:                    ;   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
  P.13  321:                    
  P.14  322:                                               .segment "_MPU65XX_VECTORS"
  P.15  323:                    
  P.16  324:  FFFA              _MPU65XX_VECTORS
  P.17  325:                    
  P.18  326:  FFFA 81 E0        _MPU65XX_NMI_VECTOR            .word    _MPU65XX_NMI
  P.19  327:  FFFC 18 E0        _MPU65XX_RESET_VECTOR          .word    _MPU65XX_RESET
  P.20  328:  FFFE              _MPU65XX_IRQ_VECTOR
  P.21  329:  FFFE              _MPU65XX_BRK_VECTOR
  P.22  330:  FFFE 36 E0                                       .word    _MPU65XX_IRQ
  P.23  331:                    
  P.24  332: (FFFF)             _MPU65XX_VECTORS_              .equ     * -1
  P.25  333:                    
        334:                    
        335:                                               .end
        336:                    
