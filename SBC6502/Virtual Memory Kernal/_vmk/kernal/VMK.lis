     1:                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2:                    ;                                                                              ;
     3:                    ;                      Virtual Memory Kernal (VMK) v0.0.1                      ;
     4:                    ;                                                                              ;
     5:                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     6:                    
     7:                                           .include    "VMK.def.a65"
     8:                                           .include    "../CPUs/_CPU.def.a65"
     9:                                           .include    "../archs/_ARCH.def.a65"
    10:                                           .include    "../devices/MMUs/_MMU.def.a65"
    11:                    
    12:                    
    13:                                               ._cpu_declare_type  MOS6502
    14:                                               ._arch_declare_type SBC6502v1_8K
    15:                                               ._mmu_declare_type  MMUv1
    16:                    
    17:                    
    18:                    ;
    19:                    ; Memory Management Unit (MMU) Configutation
    20:                    ;
    21:                    ; 2 PID Bits, 20 Virtual Address Bits, 10 Segment Offset Bits
    22:                    ;
    23:                    
    24:                            bitsPhysicalAddr   .equ     16                  ; MPU65XX with 16 bit address bus (65536)
    25:                            bitsEffectiveAddr  .equ     20                  ; SBC6502 with 20 bit effective address bus (1,048,576)
    26:                            bitsSegmentSize    .equ     10                  ; SBC6502 with 10 bit segment size (1024)
    27:                            bitsPID            .equ     2                   ; Kernal = 0x0, User = 0x1 thru 0x2
    28:                    
    29:                                               ._mmu_instantiate    bitsPhysicalAddr, bitsEffectiveAddr, bitsSegmentSize, bitsPID, list=.list
 J  66:                    
 J  67:                    _mmu_bitsPhysicalAddr      .equ     16
 J  68:                    _mmu_bitsEffectiveAddr     .equ     20
 J  69:                    _mmu_bitsSegmentSize       .equ     10
 J  70:                    _mmu_bitsPID               .equ     2
 J  71:                    
 J  72:                    _mmu_bitsSegmentAddr       .equ     16 - 10
 J  73:                    _mmu_numSegmentTags        .equ     1 << _mmu_bitsSegmentAddr + 2
 J  74:                    _mmu_configValue           .equ     (2 << 6) ! ((20 - 16) << 3) ! (( -8) << 0)
 J  75:                    
 J  76:                    
 J  77:                                           .segment     "_SBC6502_io"
 J  78:  A000              _mmu
 J  79:  A000 00           _mmu_R0                    .byte    0x00                ; Mode Register (0x0200)
 J  80:  A001 00           _mmu_R1                    .byte    0x00                ; Status Register (0x0201)
 J  81:  A002 00           _mmu_CR0                   .byte    0x00                ; Config Register 0 (0x0202)
 J  82:  A003 00           _mmu_CR1                   .byte    0x00                ; Config Register 1 (0x0203)
 J  83:                    
 J  84:  A004              _mmu_vectors               .align   0x04
 J  85:  0004              _mmu_vectors_          .org         * + (_mmu_bitsSegmentAddr << 1)    ; Allocate 2 bytes for each vector.
 J  86:  0010              _mmu_
 J  87:                    
 J  88:                    
 J  89:                                           .segment     "_MPU65XX_zp"
 J  90:  0000              _mmu_parms
 J  91:  0000 00           _mmu_parms_pid             .byte    0x00
 J  92:  0001 00 00        _mmu_parms_addr            .word    0x0000
 J  93:  0003 00 00        _mmu_parms_effect_addr     .word    0x0000
 J  94:  0005              _mmu_parms_
 J  95:                    
 J  96:                    
 J  97:                                           .segment     "_SBC6502_code"
 J  98:                    
 J  99:  E000              _mmu_initialize
 J 100:  E000 A9 00                                    LDA     #0x00               ; Set boot mode (should already be in boot mode after hardware reset.)
 J 101:  E002 8D 00 A0                                 STA     _mmu_R0
 J 102:                    
 J 103:  E005 A9 80                                    LDA     #_mmu_configValue
 J 104:                    
 J 105:  E007 8D 01 A0                                 STA     _mmu_R1
 J 106:                    
 J 107:                                            ; Clear segment vectors...
 J 108:                    
 J 109:  E00A A9 00                                    LDA     #0x00
 J 110:  E00C A2 00                                    LDX     #_mmu_numSegmentTags
 J 111:  E00E                      loop
 J 112:  E00E 9D 04 A0                                 STA     _mmu_vectors, X
 J 113:  E011 CA                                       DEX
 J 114:  E012 9D 04 A0                                 STA     _mmu_vectors, X
 J 115:  E015 CA                                       DEX
 J 116:  E016 D0 F6                                    BNE     loop
 J 117:                    
 J 118:  E018 60                                       RTS
 J 119:                    
 J 120:                    
 J 121:  E019              _mmu_timer_initialize
 J 122:  E019 60                                       RTS
 J 123:                    
 J 124:                    
 J 125:  E01A              _mmu_map_segment
 J 126:  E01A 60                                       RTS
    30:                    
    31:                    ;
    32:                    ; SBC6500 Initialization (Power-Up and Reset (RST))
    33:                    ;
    34:                                           .segment     "_SBC6502_code"
    35:                    
    36:  E01B              _MPU65XX_RESET
    37:  E01B 78                                       SEI                         ; Disable interrupts if entering via code
    38:  E01C A2 FF                                    LDX     #0xFF               ; Initialize stack pointer
    39:  E01E 9A                                       TXS
    40:                    
    41:  E01F 20 00 E0                                 JSR     _mmu_initialize
    42:                    
    43:                    
    44:                    ; Allowcate SBC6502 segment vectors for kernal ...
    45:                    
    46:                    ;      Tag        Physical Address         Effective Address
    47:                    ;    xx00.0000 - 0000.00xx.xxxx.xxxx -> 0000.0000.00xx.xxxx.xxxx - RAM (ZP & Stack & RAM) (1Kb)
    48:                    ;    xx00.0001 - 0000.01xx.xxxx.xxxx -> 1110.1111.10xx.xxxx.xxxx - IO (1Kb)
    49:                    ;    xx00.0010 - 0000.10xx.xxxx.xxxx -> 1111.1111.00xx.xxxx.xxxx - ROM (1Kb)
    50:                    
    51:                                               ._mmu_map_segment    _vmk_kernal_pid, _SBC6502_ram, _SBC6502_eram, list=.list
 J  88:                    
 J  89:                                           .segment "_SBC6502_code"
 J  90:                    
 J  91:  E022 A9 00                                    LDA     #0
 J  92:  E024 85 00                                    STA     _mmu_parms_pid
 J  93:                    
 J  94:  E026 A9 00                                    LDA     #<0
 J  95:  E028 85 01                                    STA     _mmu_parms_addr
 J  96:  E02A A9 00                                    LDA     #>0
 J  97:  E02C 85 02                                    STA     _mmu_parms_addr +1
 J  98:                    
 J  99:  E02E A9 00                                    LDA     #<0
 J 100:  E030 85 03                                    STA     _mmu_parms_effect_addr
 J 101:  E032 A9 00                                    LDA     #>0
 J 102:  E034 85 04                                    STA     _mmu_parms_effect_addr +1
 J 103:                    
 J 104:  E036 20 1A E0                                 JSR     _mmu_map_segment
    52:                    
    53:                                               ._mmu_map_segment    _vmk_kernal_pid, _SBC6502_io, _SBC6502_eio
    54:                    
    55:                                               ._mmu_map_segment    _vmk_kernal_pid, _SBC6502_rom, _SBC6502_erom
    56:                    
    57:                    
    58:                    ; Initialize quantum time interrupt (IRQ) ...
    59:                    
    60:  E067 20 19 E0                                 JSR _mmu_timer_initialize
    61:                    
    62:                    ;
    63:                    ; VMK Kernal
    64:                    ;
    65:                    
    66:  E06A              _MPU65XX_IRQ_BRK
    67:  E06A 40                                       RTI
    68:                    
    69:  E06B              _MPU65XX_NMI
    70:  E06B 40                                       RTI
    71:                    
    72:  E06C              _MPU65XX_IRQ_BRK
    73:  E06C 40                                       RTI
    74:                    
    75:                    
    76:                                           .include "../CPUs/MOS6502_Vectors.lib.a65", list=.list
 N   1:                    
 N   2:                    ;
 N   3:                    ; MOS6502 Interupt Vectors
 N   4:                    ;
 N   5:                                           .segment "_MPU65XX_vectors"
 N   6:                    
 N   7:  FFFA              _MPU65XX_INTERRUPT_VECTORS
 N   8:                    
 N   9:  FFFA 6B E0        _MPU65XX_NMI_VECTOR            .word    _MPU65XX_NMI
 N  10:  FFFC 1B E0        _MPU65XX_RESET_VECTOR          .word    _MPU65XX_RESET
 N  11:  FFFE 6C E0        _MPU65XX_IRQ_BRK_VECTOR        .word    _MPU65XX_IRQ_BRK
 N  12:                    
 N  13:                    _MPU65XX_INTERRUPT_VECTORS_    .equ    * -1
 N  14:                    
    77:                    
    78:                                           .end
    79:                    
