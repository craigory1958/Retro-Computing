;
; Memory Managment Unit (MMU) Definitions
;

.map_segment_args .struct
    pid                    .byte    0x00
    addr                   .word    0x0000
    effect_addr            .word    0x0000
                       .endstruct

                
.instantiate      .macro       bitsPhysicalAddr, bitsEffectiveAddr, bitsSegmentSize, bitsPID
 
bitsPhysicalAddr      .equ     ${bitsPhysicalAddr}
bitsEffectiveAddr     .equ     ${bitsEffectiveAddr}
bitsSegmentSize       .equ     ${bitsSegmentSize}
bitsPID               .equ     ${bitsPID}

bitsSegmentAddr       .equ     bitsPhysicalAddr - bitsSegmentSize
numVectors            .equ     1 << bitsSegmentAddr + ${bitsPID}
configValue           .equ     (bitsPID << 6) ! ((bitsEffectiveAddr - bitsPhysicalAddr) << 3) ! ((bitsSegmentSize -8) << 0)


                       .segment     "_SBC6502_IO"
mmu

;       
;   R0 - Mode Register
;       
;   ┌─┬─┬───────────┐
;   │7 6 5 4 3 2 1 0│
;   └┬┴┬┴─────┬─────┘
;    │ │      └───────┤ PID (1-6 bits) 
;    │ │              
;    │ └──────────────┤ ~Kernal Mode (0 is enabled) / User Mode (1 is enabled)
;    │                
;    └────────────────┤ ~Boot Mode (0 is enabled) / Address Translate Mode (1 is enanled)
 
R0                    .byte    0x00         ; Mode Register

;       
;   R1 - Status Register
;       
;   ┌─┬─┬─┬─┬─┬─┬─┬─┐
;   │7 6 5 4 3 2 1 0│
;   └┬┴┬┴┬┴┬┴┬┴┬┴┬┴┬┘
;    │ │ │ │ │ │ │ └──┤ Boot Address Error
 
R1                    .byte    0x00         ; Status Register

;       
;   CR0 - Config Register 0
;       
;   ┌───────┬───────┐
;   │7 6 5 4 3 2 1 0│
;   └───┬───┴───┬───┘
;       │       └─────┤ # Page Offset Bits (0-15 bits)
;       │             
;       └─────────────┤ # Page Segment Bits (0-15 bits)
 
CR0                   .byte    0x00         ; Config Register 0

;       
;   CR1 - Config Register 1
;       
;   ┌───────────────┐
;   │7 6 5 4 3 2 1 0│
;   └──┬──┴────┬────┘
;      │       └──────┤ # Effective Address Bits (0-31 bits)
;      │             
;      └──────────────┤ # PID Bits (0-6 bits)
       
CR1                   .byte    0x00         ; Config Register 1

;       
;   MVR(s) - Memory Vector Register(s)
;       
;                   ┌───────────────┐
;                   │7 6 5 4 3 2 1 0│─┤ MVR low
;                   └───────────────┘
;                   .               .
;   ┌───────────────┐               .
;   │7 6 5 4 3 2 1 0│─────────────────┤ MVR high
;   └───────────────┘               .
;   .               .               .
;   ┌─┬─┬─┬─────────────────────────┐
;   │5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0│
;   └┬┴┬┴┬┴────────────┬────────────┘
;    │ │ │             └──────────────┤ Upper Effective Address Bits (0-13 bits)
;    │ │ │                   
;    │ │ └────────────────────────────┤ Page Dirty
;    │ │                 
;    │ └──────────────────────────────┤ Write Enable
;    │
;    └────────────────────────────────┤ Vector Enable
                          
                       .align       0x10 
vectors 
                       .org         * + (numVectors << 1)    ; Allocate 2 bytes for each vector.
vectors_ 
mmu_
                    

                       .segment     "_SBC6502_CODE"

initialize
                            LDA     #0x00               ; Set boot mode (should already be in boot mode after hardware reset.)
                            STA     R0
        
                            LDA     #configValue

                            STA     R1
        
                            ; Reset segment vectors ...

                            LDA     #0x00
                            LDX     #numVectors
    @loop
                            STA     vectors, X     ; Only need to clear 2 highest bits of a segment vector.
                            DEX
                            DEX
                            BNE     @loop

                            RTS        


timer_initialize
                            RTS


map_segment
                            RTS

                       .endmacro

 
                       .segment     "_MPU65XX_ZP"

map_segment_args      .map_segment_args

                        
.map_segment      .macro  pid, physicalAddress, effectiveAddress

                       .segment "_SBC6502_CODE"

                            LDA     #${pid}
                            STA     map_segment_args:pid
                        
                            LDA     #<${physicalAddress}
                            STA     map_segment_args:addr
                            LDA     #>${physicalAddress}
                            STA     map_segment_args:addr +1
                        
                            LDA     #<${effectiveAddress}     
                            STA     map_segment_args:effect_addr
                            LDA     #>${effectiveAddress}
                            STA     map_segment_args:effect_addr +1
                         
                            JSR     map_segment

                       .endmacro
