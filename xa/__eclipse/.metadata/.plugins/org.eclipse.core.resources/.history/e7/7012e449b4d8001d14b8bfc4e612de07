

package xcom.retro.xa.expr ;


import java.util.Map ;

import org.antlr.v4.runtime.ParserRuleContext ;
import org.antlr.v4.runtime.tree.ParseTreeListener ;
import org.antlr.v4.runtime.tree.ParseTreeWalker ;
import org.fest.reflect.core.Reflection ;

import xcom.retro.xa.Argument ;
import xcom.retro.xa.Symbol ;


public class ExprUtils {

	public static Argument buildArgumentExpressionTree(ParserRuleContext prc) {

		System.out.println("public static Node buildExpressionTree(ParserRuleContext prc)") ;


//		String lexerClassname = "xcom.retro.xa.MOS6502.MOS6502Lexer" ;
//		String parserClassname = "xcom.retro.xa.MOS6502.MOS6502Parser" ;
//		String listenerClassname = "xcom.retro.xa.processors.MOS6502" ;
		String listenerClassname = "xcom.retro.xa.expr.Expr" ;

//		Class<? extends Lexer> lexerClass = Reflection.type(lexerClassname).loadAs(Lexer.class) ;
//		Class<? extends Parser> parserClass = Reflection.type(parserClassname).loadAs(Parser.class) ;
		Class<? extends ParseTreeListener> listenerClass = Reflection.type(listenerClassname).loadAs(ParseTreeListener.class) ;

//		Lexer lexer = Reflection.constructor().withParameterTypes(CharStream.class).in(lexerClass).newInstance(CharStreams.fromString("")) ;
//		Parser parser = Reflection.constructor().withParameterTypes(TokenStream.class).in(parserClass).newInstance(new CommonTokenStream(lexer)) ;

		Argument argument = new Argument() ;

		ParseTreeListener listener = Reflection.constructor().withParameterTypes(Argument.class).in(listenerClass).newInstance(argument) ;
		ParseTreeWalker walker = new ParseTreeWalker() ;

		walker.walk(listener, prc) ;


		return argument ;
	}

	public static Value<?> evaluate(Node node, Map<String, Symbol> symbols) {
		// TODO Auto-generated method stub
		return null ;
	}
}
