

package xcom.retro.xa ;


import static xcom.retro.xa.XA.AssemblyStep.Assemble ;
import static xcom.retro.xa.XA.AssemblyStep.Generate ;
import static xcom.retro.xa.XA.AssemblyStep.List ;
import static xcom.retro.xa.XA.AssemblyStep.Parse ;
import static xcom.retro.xa.XA.AssemblyStep.Write ;
import static xcom.utils4j.logging.Loggers.ConsoleLoggerName ;

import java.io.IOException ;
import java.lang.annotation.Annotation ;
import java.nio.charset.Charset ;
import java.nio.file.Files ;
import java.nio.file.Paths ;
import java.util.ArrayList ;
import java.util.Arrays ;
import java.util.HashMap ;
import java.util.List ;
import java.util.Map ;
import java.util.Properties ;
import java.util.Set ;
import java.util.stream.Stream ;

import org.antlr.v4.runtime.CharStream ;
import org.antlr.v4.runtime.CharStreams ;
import org.antlr.v4.runtime.CommonTokenStream ;
import org.antlr.v4.runtime.Lexer ;
import org.antlr.v4.runtime.Parser ;
import org.antlr.v4.runtime.ParserRuleContext ;
import org.antlr.v4.runtime.TokenStream ;
import org.antlr.v4.runtime.tree.ParseTreeListener ;
import org.antlr.v4.runtime.tree.ParseTreeWalker ;
import org.apache.commons.cli.CommandLine ;
import org.apache.commons.cli.DefaultParser ;
import org.apache.commons.cli.HelpFormatter ;
import org.apache.commons.cli.Option ;
import org.apache.commons.cli.Options ;
import org.apache.commons.cli.ParseException ;
import org.apache.commons.io.FilenameUtils ;
import org.apache.commons.lang3.StringUtils ;
import org.fest.reflect.core.Reflection ;
import org.reflections.Reflections ;
import org.slf4j.Logger ;
import org.slf4j.LoggerFactory ;

import lombok.Data ;
import xcom.retro.xa.api.annotations.Processor ;
import xcom.retro.xa.api.interfaces.iProcessor ;
import xcom.utils4j.resources.Props ;


@Data
public class XA {

	public enum AssemblyStep {
		Parse, Assemble, Generate, Write, List;
	}

	@Data
	public class AssemblyContext {

		AssemblyStep step ;

		Segment segment ;
		Map<String, Segment> segments = new HashMap<>() ;

		Statement statement ;
		List<Statement> statements = new ArrayList<>() ;

		Symbol symbol ;
		Map<String, Symbol> symbols = new HashMap<>() ;
	}


	private static final Logger Logger = LoggerFactory.getLogger(XA.class) ;
	private static final Logger Console = LoggerFactory.getLogger(ConsoleLoggerName) ;
	private static final String AppName = XA.class.getSimpleName() ;


	/**
	 * The valid command line options.
	 */
	static final String CommandLineOption_Bin = "b" ;
	static final String CommandLineOption_Processor = "p" ;
	static final String CommandLineOptionLong_Processor = "processor" ;
	static final String CommandLineOption_Help = "h" ;
	static final String CommandLineOptionLong_Help = "help" ;
	static final String CommandLineOption_List = "l" ;
	static final String CommandLineOption_Version = "v" ;
	static final String CommandLineOptionLong_Version = "version" ;

	static final Options CommandLineOptions = new Options() ;

	static {
		CommandLineOptions.addOption(Option.builder(CommandLineOption_Help).longOpt(CommandLineOptionLong_Help).desc("display this message").build()) ;
		CommandLineOptions.addOption(
				Option.builder(CommandLineOption_Processor).longOpt(CommandLineOptionLong_Processor).argName("processor").hasArg().desc("processor").build()) ;
		CommandLineOptions
				.addOption(Option.builder(CommandLineOption_Bin).argName("file").hasArg().optionalArg(true).desc("generate assembly binary").build()) ;
		CommandLineOptions
				.addOption(Option.builder(CommandLineOption_List).argName("file").hasArg().optionalArg(true).desc("generate assembly listing").build()) ;
		CommandLineOptions
				.addOption(Option.builder(CommandLineOption_Version).longOpt(CommandLineOptionLong_Version).desc("display version information").build()) ;
	}


	static Map<String, Class<? extends iProcessor>> processors ;
	static Properties props ;

	static byte[] _1byte = { 0 } ;
	static byte[] _2bytes = { 0, 0 } ;
	static byte[] _3bytes = { 0, 0, 0 } ;


	Map<String, String> args ;

	Channel channel ;
	Map<Integer, Channel> channels = new HashMap<>() ;

	AssemblyContext actx ;

	ParseTreeListener processor ;


	public XA() {
		this.actx = new AssemblyContext() ;
	}


	XA parse() throws IOException {  // Pass 1

		actx.step = Parse ;

		channels.put(0, new Channel(0, 0, args.get("source"))) ;
		channel = channels.get(0) ;

		actx.segments.put("<default>", new Segment("<default>")) ;
		actx.segment = actx.segments.get("<default>") ;


		String lexerClassname = "xcom.retro.xa.processor.MOS6502.MOS6502Lexer" ;
		String parserClassname = "xcom.retro.xa.processor.MOS6502.MOS6502Parser" ;
		String listenerClassname = "xcom.retro.xa.processors.MOS6502" ;

		Class<? extends Lexer> lexerClass = Reflection.type(lexerClassname).loadAs(Lexer.class) ;
		Class<? extends Parser> parserClass = Reflection.type(parserClassname).loadAs(Parser.class) ;
		Class<? extends ParseTreeListener> listenerClass = Reflection.type(listenerClassname).loadAs(ParseTreeListener.class) ;

		Lexer lexer = Reflection.constructor().withParameterTypes(CharStream.class).in(lexerClass).newInstance(CharStreams.fromString("")) ;
		Parser parser = Reflection.constructor().withParameterTypes(TokenStream.class).in(parserClass).newInstance(new CommonTokenStream(lexer)) ;
		processor = Reflection.constructor().withParameterTypes(AssemblyContext.class).in(listenerClass).newInstance(actx) ;
		ParseTreeWalker walker = new ParseTreeWalker() ;

		try ( Stream<String> lines = Files.lines(Paths.get(channel.getSrcFSpec()), Charset.defaultCharset()) ) {

			lines.forEachOrdered(line -> {

				channel.setLn(channel.getLn() + 1) ;
				actx.statements.add(new Statement(channel, line, actx.segment)) ;
				actx.statement = actx.statements.get(actx.statements.size() - 1) ;

				lexer.setInputStream(CharStreams.fromString(line)) ;
				parser.setTokenStream(new CommonTokenStream(lexer)) ;

				actx.statement.prc = Reflection.method("statement").withReturnType(ParserRuleContext.class).in(parser).invoke() ;
//				System.out.println(actx.statement.prc.getText()) ;
				walker.walk(processor, actx.statement.prc) ;

				if ( !actx.segment.blocks.isEmpty() ) {
					actx.statement.block = actx.segment.blocks.get(actx.segment.blocks.size() - 1) ;
				}
			}) ;
		}


		return this ;
	}


	XA assemble() { // Pass 2

		actx.step = Assemble ;

		for ( Statement statement : actx.statements ) {
			actx.statement = statement ;

			if ( statement.addressingModeCallback != null )
				Reflection.method(statement.addressingModeCallback).in(this.processor).invoke() ;
		}

		return this ;
	}


	XA generate() {

		actx.step = Generate ;

		for ( Statement statement : actx.statements ) {
//			System.out.println(statement.address + " " + statement.getLine()) ;
//			if ( statement.bytes != null && statement.bytes.length > 0 )
//				statement.block.fillBytes(statement.address, statement.bytes) ;
		}
		return this ;
	}


	XA write() {

		actx.step = Write ;

		System.out.println() ;
		actx.getSegments().forEach((k, segment) -> {
			segment.getBlocks().forEach(block -> {
				for ( int b = 0; b < block.bytes.length; b++ )
					System.out.print(String.format(" %02X", block.bytes[b])) ;
			}) ;
		}) ;
		System.out.println() ;

		return this ;
	}


	XA list() {

		actx.step = List ;

		System.out.println() ;
		for ( Statement _statement : actx.statements ) {
			System.out.print(String.format("%4d:", _statement.getLn())) ;

			System.out.print(String.format(" %04X", _statement.address)) ;

			for ( int b = 0; b < 3; b++ ) {
				if ( _statement.bytes != null && b < _statement.bytes.length )
					System.out.print(String.format(" %02X", _statement.bytes[b])) ;
				else
					System.out.print("   ") ;
			}

			System.out.println(String.format("  %s", _statement.getLine())) ;
		}

		return this ;
	}


	public static void main(String[] args) throws ParseException, IOException {

		// Parse and process command line args ...

		final CommandLine cmd = parseCommandLine(CommandLineOptions, args) ;


		if ( cmd.hasOption(CommandLineOption_Help) )
			new HelpFormatter().printHelp("xa [options] file\n options:", CommandLineOptions) ;

		else if ( cmd.hasOption(CommandLineOption_Version) )
			System.out.println("v0.0.1") ;

		else {

			// Load properties ...
			{
				final Class<XA> clazz = XA.class ;
				final String rSpec = "/" + (clazz.getPackage().toString().substring(8) + "." + AppName).replace(".", "/") + ".properties" ;
				props = Props.merge(clazz, new Properties(), rSpec) ;

				Logger.debug("props: {}", props) ;
			}

			final String path = props.getProperty("xa.processor.scan.classpath") ;
			processors = scanAndLoadCPUs(path, Processor.class.getName(), processors) ;

			Logger.debug("processors: {}", processors) ;

			final XA assembler = new XA() ;
			assembler.args = decodeCommandLine(cmd) ;

			Console.info("\nUsage ...") ;
			for ( final Option option : cmd.getOptions() )
				Console.info("    -" + option.getOpt() + " " + StringUtils.trimToEmpty(option.getValue())) ;

			//

			assembler.parse().assemble().generate().write().list() ;

			Console.info("\nDone.") ;
		}
	}


	@SuppressWarnings("unchecked")
	static Map<String, Class<? extends iProcessor>> scanAndLoadCPUs(String path, String annotation, Map<String, Class<? extends iProcessor>> processors) {

		Logger.debug("Scanning classpath '{}.*' for {} ...", path, annotation) ;

		if ( processors == null )
			processors = new HashMap<>() ;

		try {
			final Set<Class<?>> _processors = new Reflections(path).getTypesAnnotatedWith((Class<? extends Annotation>) Class.forName(annotation)) ;
			Logger.info("found {} annotations in classpath: |{}|", _processors.size(), _processors) ;

			for ( final Class<?> _processor : _processors )
				for ( final Annotation a : _processor.getAnnotations() )

					if ( a.annotationType().getName().equals(annotation) )
						processors.put(_processor.getSimpleName(), (Class<? extends iProcessor>) _processor) ;
		}
		catch ( IllegalArgumentException | SecurityException | ClassNotFoundException e ) {
			e.printStackTrace() ;
		}


		return processors ;
	}


	static CommandLine parseCommandLine(final Options options, final String[] args) throws ParseException {

		String[] _args = Arrays.copyOf(args, args.length + 1) ;
		_args[args.length - 1] = "" ;
		_args[args.length] = args[args.length - 1] ;

		Logger.debug("_args: {}", Arrays.asList(_args)) ;

		final CommandLine cmd = new DefaultParser().parse(options, _args) ;

		return cmd ;
	}


	static Map<String, String> decodeCommandLine(CommandLine cmd) {

		Map<String, String> args = new HashMap<>() ;

		// Decode processor ...
		{
			String processor = StringUtils.trimToEmpty(cmd.getOptionValue(CommandLineOption_Processor)) ;

			if ( processor.isEmpty() )
				processor = props.getProperty("xa.processor.default") ;

			args.put("processor", processor) ;
		}

		// Decode source file specification ....
		{
			String srcFSpec = cmd.getArgList().get(0) ;
			String srcDSpec = FilenameUtils.getFullPath(srcFSpec) ;
			String srcFNSpec = FilenameUtils.getName(srcFSpec) ;
			String srcFN = FilenameUtils.getBaseName(srcFNSpec) ;
			String srcFNExt = FilenameUtils.getExtension(srcFNSpec) ;
			String[] srcFNParts = srcFNSpec.split("\\.") ;

			switch ( srcFNParts.length ) {

				case 1:
					srcFNExt = ".asm" ;
					break ;

				case 3:
					args.put("processor", srcFNParts[1]) ;
					break ;
			}

			args.put("source", srcDSpec + srcFN + "." + srcFNExt) ;
		}

		// Decode binary file specification ....
		{
			if ( cmd.hasOption(CommandLineOption_Bin) ) {
				String bin = StringUtils.trimToEmpty(cmd.getOptionValue(CommandLineOption_Bin)) ;

				if ( bin.isEmpty() ) {
					String srcFSpec = args.get("source") ;
					String srcDSpec = FilenameUtils.getPath(srcFSpec) ;
					String srcFNSpec = FilenameUtils.getName(srcFSpec) ;
					String[] srcFNParts = srcFNSpec.split("\\.") ;

					args.put("bin", srcDSpec + srcFNParts[0] + ".bin") ;
				}
				else
					args.put("bin", bin) ;
			}
		}

		// Decode listing file specification ....
		{
			if ( cmd.hasOption(CommandLineOption_List) ) {
				String list = StringUtils.trimToEmpty(cmd.getOptionValue(CommandLineOption_List)) ;

				if ( list.isEmpty() ) {
					String srcFSpec = args.get("source") ;
					String srcDSpec = FilenameUtils.getPath(srcFSpec) ;
					String srcFNSpec = FilenameUtils.getName(srcFSpec) ;
					String[] srcFNParts = srcFNSpec.split("\\.") ;

					args.put("list", srcDSpec + srcFNParts[0] + ".lis") ;
				}
				else
					args.put("list", list) ;
			}
		}


		Logger.debug("args: {}", Arrays.asList(args)) ;

		return args ;
	}

}
