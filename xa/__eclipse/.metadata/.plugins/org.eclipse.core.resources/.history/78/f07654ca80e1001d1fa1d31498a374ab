

package xcom.retro.xa.expr ;


import java.util.Stack ;

import org.antlr.v4.runtime.ParserRuleContext ;
import org.fest.reflect.core.Reflection ;
import org.fest.reflect.exception.ReflectionError ;
import org.hibernate.internal.build.AllowSysOut ;

import xcom.retro.xa.expr.binary._BinaryOpNode ;
import xcom.retro.xa.expr.unary.Minus ;
import xcom.retro.xa.expr.unary._UnaryOpNode ;
import xcom.retro.xa.expr.value.StringLiteral ;
import xcom.retro.xa.expr.value._IntegerValueNode ;
import xcom.utils4j.Enums ;

import static xcom.retro.xa.expr.Expr.OperatorOperands.* ;


public class Expr extends ExpressionsBaseListener {

	enum OperatorOperands {
		Unary, Binary, Ternary;
	}

	// https://en.cppreference.com/w/c/language/operator_precedence
	enum Operators {

		BitwiseAnd(Binary, 8), //
		BitwiseShiftOr(Binary, 10), //
		BitwiseShiftLeft(Binary, 5), //
		BitwiseShiftRight(Binary, 5), //

		IntegerAdd(Binary, 4), //
		IntegerDivide(Binary, 3), //
		IntegerMultiply(Binary, 3), //
		IntegerSubtract(Binary, 4), //

		HighByte(Unary, 2), //
		LogicalNot(Unary, 2), //
		LowByte(Unary, 2), //
		Minus(Unary, 2), //
		Plus(Unary, 2), //
		;


		OperatorOperands operands ;
		int precedence ;


		Operators(OperatorOperands operands, int precedence) {
			this.operands = operands ;
			this.precedence = precedence ;
		}
	}


	Stack<ValueNode<?>> operands = new Stack<>() ;
	Stack<OpNode> operators = new Stack<>() ;
	Node expr ;


	@Override
	public void enterEveryRule(ParserRuleContext ctx) {
		invokeMethodFromContext("enter", ctx) ;
	}

	@Override
	public void exitEveryRule(ParserRuleContext ctx) {
		invokeMethodFromContext("exit", ctx) ;
	}


	public void invokeMethodFromContext(String prefix, ParserRuleContext ctx) {

		try {
			String method = ctx.getClass().getSimpleName() ;
			method = prefix + method.substring(0, method.length() - 7) ;
//			System.out.println("invoke: " + method) ;
			Reflection.method(method).withParameterTypes(ParserRuleContext.class).in(this).invoke(ctx) ;
		}
		catch ( ReflectionError ex ) {}
	}


	public void enterExpr(ParserRuleContext ctx) {
		operands.push(new StringLiteral("(")) ;
	}

	public void exitArgument(ParserRuleContext ctx) {
		System.out.println("exitArgument()") ;
		System.out.println(" operands: " + operands) ;
		System.out.println("operators: " + operators) ;
		System.out.println("     expr: " + expr) ;
		int i = expr.eval(null);
		System.out.println(i) ;
	}

	public void exitExpr(ParserRuleContext ctx) {
		System.out.println("exitExpr()") ;
		System.out.println(" operands: " + operands) ;
		System.out.println("operators: " + operators) ;
		System.out.println("     expr: " + expr) ;

		while ( !operators.isEmpty() ) {
			_UnaryOpNode<?> n = (_UnaryOpNode<?>) operators.pop() ;
//			_UnaryOpNode<?> n = new Minus("-", Operators.Minus.precedence) ;
			n.setNode(operands.pop()) ;
			System.out.println("n: " + n) ;
			
			expr = n ;
		} ;

		operands.pop() ;

		System.out.println(" operands: " + operands) ;
		System.out.println("operators: " + operators) ;
		System.out.println("     expr: " + expr) ;
	}


	public void exitIdentifier(ParserRuleContext ctx) {
		operands.push(new StringLiteral(ctx.getText())) ;
	}


	//
	// Binary Operators ...
	//

	public void exitBinary(ParserRuleContext ctx) {

		String operatorName = ctx.getChild(0).getClass().getSimpleName() ;
		operatorName = operatorName.substring(0, operatorName.length() - 7) ;

		Integer precedence = Enums.valueOfIgnoreCase(Operators.class, operatorName).precedence ;

		_BinaryOpNode<?> operator = Reflection.constructor().withParameterTypes(String.class, Integer.class).in(_BinaryOpNode.class)
				.newInstance(ctx.getChild(0).getChild(0).getText(), precedence) ;
		operators.push(operator) ;
	}


	//
	// Unary Operators ...
	//

	public void exitUnary(ParserRuleContext ctx) {

		String operatorName = ctx.getChild(0).getClass().getSimpleName() ;
		operatorName = operatorName.substring(0, operatorName.length() - 7) ;

		Integer precedence = Enums.valueOfIgnoreCase(Operators.class, operatorName).precedence ;

		_UnaryOpNode<?> unary = Reflection.constructor().withParameterTypes(String.class, Integer.class).in(_UnaryOpNode.class)
				.newInstance(ctx.getChild(0).getChild(0).getText() + "'", precedence) ;
		System.out.println("unary: "+unary) ;
		operators.push(unary) ;
	}


	//
	// Literals ...
	//

//	public void exitLiteral(ParserRuleContext ctx) {
//
//		String literalType = ctx.getChild(0).getClass().getSimpleName() ;
//		literalType = literalType.substring(0, literalType.length() - 7) ;
//
//		String value = ctx.getChild(0).getChild(0).getText() ;
//		System.out.println(literalType + " - " + value) ;
//
//		try {
//		_IntegerValueNode literal = Reflection.constructor().withParameterTypes(String.class).in(_IntegerValueNode.class).newInstance(value) ;
//		operands.push(literal) ;
//		}
//		catch ( ReflectionError ex ) {
//			ex.printStackTrace();
//		}
//
//	}

	public void exitBinaryLiteral(ParserRuleContext ctx) {
		operands.push(new _IntegerValueNode(Integer.valueOf(ctx.getText(), 2))) ;
	}

	public void exitDecimalLiteral(ParserRuleContext ctx) {
		operands.push(new _IntegerValueNode(Integer.valueOf(ctx.getText()))) ;
	}

	public void exitHexLiteral(ParserRuleContext ctx) {
		int i = ctx.getText().contains("$") ? 1 : 2 ;
		operands.push(new _IntegerValueNode(Integer.valueOf(ctx.getText().substring(i), 16))) ;
	}

	public void exitOctalLiteral(ParserRuleContext ctx) {
		operands.push(new _IntegerValueNode(Integer.valueOf(ctx.getText(), 8))) ;
	}
}
