

package xcom.retro.xa.ParsingChecks ;


import static org.junit.Assert.assertArrayEquals ;

import java.io.IOException ;
import java.util.ArrayList ;
import java.util.Arrays ;
import java.util.Collection ;
import java.util.List ;

import org.junit.Before ;
import org.junit.Test ;
import org.junit.runner.RunWith ;
import org.junit.runners.Parameterized ;


@RunWith(Parameterized.class)
public class _Test_BasicStatementParsing {

	@Parameterized.Parameters()
	public static Collection<Object[]> data() {

		//@formatter:off

        final Object[][] results = {

                // { String uP, String rule, String src, String[] expectedContexts }

                { "MOS6502", "statement", "     NOP", 
                	"Statement, Instruction, Opcode, AddressingMode, Implied" 
                },
                { "MOS6502", "statement", "     LDA #0", 
                	"Statement, Instruction, Opcode, AddressingMode, Immediate, Argument, Expr, Term, Literal, NumericLiteral, DecimalLiteral" 
                },
                { "MOS6502", "statement", "abc  LDA #0", 
                	"Statement, Label, Instruction, Opcode, AddressingMode, Immediate, Argument, Expr, Term, Literal, NumericLiteral, DecimalLiteral" 
                },
                { "MOS6502", "statement", "abc  NOP", 
                	"Statement, Label, Instruction, Opcode, AddressingMode, Implied" 
                },

                { "MOS6502", "statement", "     NOP ; w/comment", 
                	"Statement, Instruction, Opcode, AddressingMode, Implied" 
                },
                { "MOS6502", "statement", "     LDA #0 ; w/comment", 
                	"Statement, Instruction, Opcode, AddressingMode, Immediate, Argument, Expr, Term, Literal, NumericLiteral, DecimalLiteral" 
                },
                { "MOS6502", "statement", "abc  LDA #0 ; w/comment", 
                	"Statement, Label, Instruction, Opcode, AddressingMode, Immediate, Argument, Expr, Term, Literal, NumericLiteral, DecimalLiteral" 
                },
                { "MOS6502", "statement", "abc  NOP ; w/comment", 
                	"Statement, Label, Instruction, Opcode, AddressingMode, Implied" 
                },
        } ;

        //@formatter:on

		return (Arrays.asList(results)) ;
	}


	String processor ;
	String pProcessor ;

	String rule ;
	String src ;
	List<String> expectedContexts ;

	static ParsingScaffold parser ;


	public _Test_BasicStatementParsing(String processor, String rule, String src, String expectedContexts) {

		this.processor = processor ;
		this.rule = rule ;
		this.src = src ;

		this.expectedContexts = new ArrayList<String>(Arrays.asList(expectedContexts.split(", "))) ;
	}


	@Before
	public void setupBeforeEachTest() throws Exception {

		if ( !processor.equals(pProcessor) ) {
			parser = new ParsingScaffold() ;
			parser.init(processor) ;
		}

		pProcessor = processor ;
	}


	@Test
	public void parseTest() throws IOException {

		List<String> actual = parser.parse(rule, src).processor.walked ;
		System.out.println(src + " - " + actual) ;

		assertArrayEquals(expectedContexts.toArray(), actual.toArray()) ;
	}
}
