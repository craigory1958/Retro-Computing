

package xcom.retro.xa.directives ;


import static org.junit.Assert.assertEquals ;

import java.io.File ;
import java.nio.charset.StandardCharsets ;
import java.util.Arrays ;
import java.util.Collection ;

import org.apache.commons.io.FileUtils ;
import org.apache.commons.io.FilenameUtils ;
import org.junit.Test ;
import org.junit.runner.RunWith ;
import org.junit.runners.Parameterized ;

import xcom.retro.xa.XA ;


@RunWith(Parameterized.class)
public class _Test_XA_OrgDirective {

	@Parameterized.Parameters
	public static Collection<Object[]> data() {

		//@formatter:off

        final Object[][] results = {

                // { String testDesc, String fSpec }

                { "No ,org", "898e1438-033a-11ee-be56-0242ac120002.MOS6502.asm", },
                { ".org $200", "3fbc3fc0-0343-11ee-be56-0242ac120002.MOS6502.asm", },
                { "Non-Consecutive Memory Blocks", "9256bd36-039e-11ee-be56-0242ac120002.MOS6502.asm", },
        } ;

        //@formatter:on

		return (Arrays.asList(results)) ;
	}


	String fSpec ;


	public _Test_XA_OrgDirective(final String testDesc, final String fSpec) {

		this.fSpec = fSpec ;
	}


	@Test
	public void basicCheck() throws Exception {

		String _dSpec = FilenameUtils.getFullPath(this.getClass().getResource(fSpec).toURI().getPath()) ;
		String _fSpec = FilenameUtils.getBaseName(FilenameUtils.getBaseName(fSpec)) ;

		String[] args = { "-b", "-l", _dSpec + fSpec } ;

		XA.main(args) ;

		String expected = FileUtils.readFileToString(new File(_dSpec + _fSpec + ".kim"), StandardCharsets.UTF_8) ;
		String actual = FileUtils.readFileToString(new File(_dSpec + _fSpec + ".bin"), StandardCharsets.UTF_8) ;

		assertEquals(expected, actual) ;
	}
}
