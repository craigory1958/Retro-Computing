// Generated from ExpressionsV1_.g4 by ANTLR 4.13.2
package xcom.retro.xa.antlr;
import org.antlr.v4.runtime.tree.ParseTreeListener;

/**
 * This interface defines a complete listener for a parse tree produced by
 * {@link ExpressionsV1_Parser}.
 */
public interface ExpressionsV1_Listener extends ParseTreeListener {
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#expr}.
	 * @param ctx the parse tree
	 */
	void enterExpr(ExpressionsV1_Parser.ExprContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#expr}.
	 * @param ctx the parse tree
	 */
	void exitExpr(ExpressionsV1_Parser.ExprContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#term}.
	 * @param ctx the parse tree
	 */
	void enterTerm(ExpressionsV1_Parser.TermContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#term}.
	 * @param ctx the parse tree
	 */
	void exitTerm(ExpressionsV1_Parser.TermContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#lc}.
	 * @param ctx the parse tree
	 */
	void enterLc(ExpressionsV1_Parser.LcContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#lc}.
	 * @param ctx the parse tree
	 */
	void exitLc(ExpressionsV1_Parser.LcContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#binary}.
	 * @param ctx the parse tree
	 */
	void enterBinary(ExpressionsV1_Parser.BinaryContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#binary}.
	 * @param ctx the parse tree
	 */
	void exitBinary(ExpressionsV1_Parser.BinaryContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#comparison}.
	 * @param ctx the parse tree
	 */
	void enterComparison(ExpressionsV1_Parser.ComparisonContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#comparison}.
	 * @param ctx the parse tree
	 */
	void exitComparison(ExpressionsV1_Parser.ComparisonContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#unary}.
	 * @param ctx the parse tree
	 */
	void enterUnary(ExpressionsV1_Parser.UnaryContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#unary}.
	 * @param ctx the parse tree
	 */
	void exitUnary(ExpressionsV1_Parser.UnaryContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#integerAdd}.
	 * @param ctx the parse tree
	 */
	void enterIntegerAdd(ExpressionsV1_Parser.IntegerAddContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#integerAdd}.
	 * @param ctx the parse tree
	 */
	void exitIntegerAdd(ExpressionsV1_Parser.IntegerAddContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#integerSubtract}.
	 * @param ctx the parse tree
	 */
	void enterIntegerSubtract(ExpressionsV1_Parser.IntegerSubtractContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#integerSubtract}.
	 * @param ctx the parse tree
	 */
	void exitIntegerSubtract(ExpressionsV1_Parser.IntegerSubtractContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#integerMultiply}.
	 * @param ctx the parse tree
	 */
	void enterIntegerMultiply(ExpressionsV1_Parser.IntegerMultiplyContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#integerMultiply}.
	 * @param ctx the parse tree
	 */
	void exitIntegerMultiply(ExpressionsV1_Parser.IntegerMultiplyContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#integerDivide}.
	 * @param ctx the parse tree
	 */
	void enterIntegerDivide(ExpressionsV1_Parser.IntegerDivideContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#integerDivide}.
	 * @param ctx the parse tree
	 */
	void exitIntegerDivide(ExpressionsV1_Parser.IntegerDivideContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#bitwiseShiftLeft}.
	 * @param ctx the parse tree
	 */
	void enterBitwiseShiftLeft(ExpressionsV1_Parser.BitwiseShiftLeftContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#bitwiseShiftLeft}.
	 * @param ctx the parse tree
	 */
	void exitBitwiseShiftLeft(ExpressionsV1_Parser.BitwiseShiftLeftContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#bitwiseShiftRight}.
	 * @param ctx the parse tree
	 */
	void enterBitwiseShiftRight(ExpressionsV1_Parser.BitwiseShiftRightContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#bitwiseShiftRight}.
	 * @param ctx the parse tree
	 */
	void exitBitwiseShiftRight(ExpressionsV1_Parser.BitwiseShiftRightContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#bitwiseAnd}.
	 * @param ctx the parse tree
	 */
	void enterBitwiseAnd(ExpressionsV1_Parser.BitwiseAndContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#bitwiseAnd}.
	 * @param ctx the parse tree
	 */
	void exitBitwiseAnd(ExpressionsV1_Parser.BitwiseAndContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#bitwiseOr}.
	 * @param ctx the parse tree
	 */
	void enterBitwiseOr(ExpressionsV1_Parser.BitwiseOrContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#bitwiseOr}.
	 * @param ctx the parse tree
	 */
	void exitBitwiseOr(ExpressionsV1_Parser.BitwiseOrContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#logicalAnd}.
	 * @param ctx the parse tree
	 */
	void enterLogicalAnd(ExpressionsV1_Parser.LogicalAndContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#logicalAnd}.
	 * @param ctx the parse tree
	 */
	void exitLogicalAnd(ExpressionsV1_Parser.LogicalAndContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#logicalOr}.
	 * @param ctx the parse tree
	 */
	void enterLogicalOr(ExpressionsV1_Parser.LogicalOrContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#logicalOr}.
	 * @param ctx the parse tree
	 */
	void exitLogicalOr(ExpressionsV1_Parser.LogicalOrContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#equal}.
	 * @param ctx the parse tree
	 */
	void enterEqual(ExpressionsV1_Parser.EqualContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#equal}.
	 * @param ctx the parse tree
	 */
	void exitEqual(ExpressionsV1_Parser.EqualContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#notEqual}.
	 * @param ctx the parse tree
	 */
	void enterNotEqual(ExpressionsV1_Parser.NotEqualContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#notEqual}.
	 * @param ctx the parse tree
	 */
	void exitNotEqual(ExpressionsV1_Parser.NotEqualContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#lessThan}.
	 * @param ctx the parse tree
	 */
	void enterLessThan(ExpressionsV1_Parser.LessThanContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#lessThan}.
	 * @param ctx the parse tree
	 */
	void exitLessThan(ExpressionsV1_Parser.LessThanContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#greaterThan}.
	 * @param ctx the parse tree
	 */
	void enterGreaterThan(ExpressionsV1_Parser.GreaterThanContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#greaterThan}.
	 * @param ctx the parse tree
	 */
	void exitGreaterThan(ExpressionsV1_Parser.GreaterThanContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#plus}.
	 * @param ctx the parse tree
	 */
	void enterPlus(ExpressionsV1_Parser.PlusContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#plus}.
	 * @param ctx the parse tree
	 */
	void exitPlus(ExpressionsV1_Parser.PlusContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#minus}.
	 * @param ctx the parse tree
	 */
	void enterMinus(ExpressionsV1_Parser.MinusContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#minus}.
	 * @param ctx the parse tree
	 */
	void exitMinus(ExpressionsV1_Parser.MinusContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#highByte}.
	 * @param ctx the parse tree
	 */
	void enterHighByte(ExpressionsV1_Parser.HighByteContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#highByte}.
	 * @param ctx the parse tree
	 */
	void exitHighByte(ExpressionsV1_Parser.HighByteContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#lowByte}.
	 * @param ctx the parse tree
	 */
	void enterLowByte(ExpressionsV1_Parser.LowByteContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#lowByte}.
	 * @param ctx the parse tree
	 */
	void exitLowByte(ExpressionsV1_Parser.LowByteContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#logicalNot}.
	 * @param ctx the parse tree
	 */
	void enterLogicalNot(ExpressionsV1_Parser.LogicalNotContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#logicalNot}.
	 * @param ctx the parse tree
	 */
	void exitLogicalNot(ExpressionsV1_Parser.LogicalNotContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#literal}.
	 * @param ctx the parse tree
	 */
	void enterLiteral(ExpressionsV1_Parser.LiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#literal}.
	 * @param ctx the parse tree
	 */
	void exitLiteral(ExpressionsV1_Parser.LiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#numericLiteral}.
	 * @param ctx the parse tree
	 */
	void enterNumericLiteral(ExpressionsV1_Parser.NumericLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#numericLiteral}.
	 * @param ctx the parse tree
	 */
	void exitNumericLiteral(ExpressionsV1_Parser.NumericLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#alphanumericLiteral}.
	 * @param ctx the parse tree
	 */
	void enterAlphanumericLiteral(ExpressionsV1_Parser.AlphanumericLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#alphanumericLiteral}.
	 * @param ctx the parse tree
	 */
	void exitAlphanumericLiteral(ExpressionsV1_Parser.AlphanumericLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#binaryLiteral}.
	 * @param ctx the parse tree
	 */
	void enterBinaryLiteral(ExpressionsV1_Parser.BinaryLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#binaryLiteral}.
	 * @param ctx the parse tree
	 */
	void exitBinaryLiteral(ExpressionsV1_Parser.BinaryLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#octalLiteral}.
	 * @param ctx the parse tree
	 */
	void enterOctalLiteral(ExpressionsV1_Parser.OctalLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#octalLiteral}.
	 * @param ctx the parse tree
	 */
	void exitOctalLiteral(ExpressionsV1_Parser.OctalLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#decimalLiteral}.
	 * @param ctx the parse tree
	 */
	void enterDecimalLiteral(ExpressionsV1_Parser.DecimalLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#decimalLiteral}.
	 * @param ctx the parse tree
	 */
	void exitDecimalLiteral(ExpressionsV1_Parser.DecimalLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#hexLiteral}.
	 * @param ctx the parse tree
	 */
	void enterHexLiteral(ExpressionsV1_Parser.HexLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#hexLiteral}.
	 * @param ctx the parse tree
	 */
	void exitHexLiteral(ExpressionsV1_Parser.HexLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#characterLiteral}.
	 * @param ctx the parse tree
	 */
	void enterCharacterLiteral(ExpressionsV1_Parser.CharacterLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#characterLiteral}.
	 * @param ctx the parse tree
	 */
	void exitCharacterLiteral(ExpressionsV1_Parser.CharacterLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#stringLiteral}.
	 * @param ctx the parse tree
	 */
	void enterStringLiteral(ExpressionsV1_Parser.StringLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#stringLiteral}.
	 * @param ctx the parse tree
	 */
	void exitStringLiteral(ExpressionsV1_Parser.StringLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExpressionsV1_Parser#identifier}.
	 * @param ctx the parse tree
	 */
	void enterIdentifier(ExpressionsV1_Parser.IdentifierContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExpressionsV1_Parser#identifier}.
	 * @param ctx the parse tree
	 */
	void exitIdentifier(ExpressionsV1_Parser.IdentifierContext ctx);
}