

package xcom.retro.xa.ParsingChecks ;


import static org.junit.Assert.assertArrayEquals ;

import java.io.IOException ;
import java.util.ArrayList ;
import java.util.Arrays ;
import java.util.Collection ;
import java.util.List ;

import org.junit.BeforeClass ;
import org.junit.Test ;
import org.junit.runner.RunWith ;
import org.junit.runners.Parameterized ;


@RunWith(Parameterized.class)
public class _Test_AddressingModes_MOS6502 {

	@Parameterized.Parameters()
	public static Collection<Object[]> data() {

		//@formatter:off

        final Object[][] results = {

                // { String mode,  String src, String[] expectedContexts }

                { "Immediate",     " ADC #xyz",     "Statement, Instruction, Opcode, AddressingMode, Immediate, Argument, Expr, Term, Literal, NumericLiteral, HexLiteral" },
                { "Absolute",      " ADC xyz",    "Statement, Instruction, Opcode, AddressingMode, Absolute, Argument, Expr, Term, Literal, NumericLiteral, HexLiteral" },
                { "Zero Page",     " ADC xyz",      "Statement, Instruction, Opcode, AddressingMode, Absolute, Argument, Expr, Term, Literal, NumericLiteral, HexLiteral" },
                { "Accumulator",   " ASL A",         "Statement, Instruction, Opcode, AddressingMode, Accumulator" },
                { "Implied",       " BRK",           "Statement, Instruction, Opcode, AddressingMode, Immediate, Argument, Expr, Term, Literal, NumericLiteral, HexLiteral" },
                { "[Indirect ,X]", " ADC [xyz, X]", "Statement, Instruction, Opcode, AddressingMode, Immediate, Argument, Expr, Term, Literal, NumericLiteral, HexLiteral" },
           } ;

        //@formatter:on

		return (Arrays.asList(results)) ;
	}


	String mode ;
	String src ;
	List<String> expectedContexts ;

	static ParsingScaffold parser ;


	public _Test_AddressingModes_MOS6502(String mode, String src, String expectedContexts) {

		this.mode = mode ;
		this.src = src ;

		this.expectedContexts = new ArrayList<String>(Arrays.asList(expectedContexts.split(", "))) ;
	}


	@BeforeClass
	public static void setupBeforeClass() throws Exception {

		parser = new ParsingScaffold() ;
		parser.init("MOS6502") ;
	}


	@Test
	public void parseTest() throws IOException {

		List<String> actual = parser.parse("statement", src).processor.walked ;
		System.out.println(mode + ": " + src + " - " + actual) ;

		assertArrayEquals(expectedContexts.toArray(), actual.toArray()) ;
	}
}
