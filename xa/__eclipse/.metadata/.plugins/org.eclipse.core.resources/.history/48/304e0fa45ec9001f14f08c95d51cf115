// Generated from Expressions_v1.g4 by ANTLR 4.13.2
package xcom.retro.xa.antlr;
import org.antlr.v4.runtime.tree.ParseTreeListener;

/**
 * This interface defines a complete listener for a parse tree produced by
 * {@link Expressions_v1Parser}.
 */
public interface Expressions_v1Listener extends ParseTreeListener {
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#expr}.
	 * @param ctx the parse tree
	 */
	void enterExpr(Expressions_v1Parser.ExprContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#expr}.
	 * @param ctx the parse tree
	 */
	void exitExpr(Expressions_v1Parser.ExprContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#term}.
	 * @param ctx the parse tree
	 */
	void enterTerm(Expressions_v1Parser.TermContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#term}.
	 * @param ctx the parse tree
	 */
	void exitTerm(Expressions_v1Parser.TermContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#lc}.
	 * @param ctx the parse tree
	 */
	void enterLc(Expressions_v1Parser.LcContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#lc}.
	 * @param ctx the parse tree
	 */
	void exitLc(Expressions_v1Parser.LcContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#binary}.
	 * @param ctx the parse tree
	 */
	void enterBinary(Expressions_v1Parser.BinaryContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#binary}.
	 * @param ctx the parse tree
	 */
	void exitBinary(Expressions_v1Parser.BinaryContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#comparison}.
	 * @param ctx the parse tree
	 */
	void enterComparison(Expressions_v1Parser.ComparisonContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#comparison}.
	 * @param ctx the parse tree
	 */
	void exitComparison(Expressions_v1Parser.ComparisonContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#unary}.
	 * @param ctx the parse tree
	 */
	void enterUnary(Expressions_v1Parser.UnaryContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#unary}.
	 * @param ctx the parse tree
	 */
	void exitUnary(Expressions_v1Parser.UnaryContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#integerAdd}.
	 * @param ctx the parse tree
	 */
	void enterIntegerAdd(Expressions_v1Parser.IntegerAddContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#integerAdd}.
	 * @param ctx the parse tree
	 */
	void exitIntegerAdd(Expressions_v1Parser.IntegerAddContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#integerSubtract}.
	 * @param ctx the parse tree
	 */
	void enterIntegerSubtract(Expressions_v1Parser.IntegerSubtractContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#integerSubtract}.
	 * @param ctx the parse tree
	 */
	void exitIntegerSubtract(Expressions_v1Parser.IntegerSubtractContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#integerMultiply}.
	 * @param ctx the parse tree
	 */
	void enterIntegerMultiply(Expressions_v1Parser.IntegerMultiplyContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#integerMultiply}.
	 * @param ctx the parse tree
	 */
	void exitIntegerMultiply(Expressions_v1Parser.IntegerMultiplyContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#integerDivide}.
	 * @param ctx the parse tree
	 */
	void enterIntegerDivide(Expressions_v1Parser.IntegerDivideContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#integerDivide}.
	 * @param ctx the parse tree
	 */
	void exitIntegerDivide(Expressions_v1Parser.IntegerDivideContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#bitwiseShiftLeft}.
	 * @param ctx the parse tree
	 */
	void enterBitwiseShiftLeft(Expressions_v1Parser.BitwiseShiftLeftContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#bitwiseShiftLeft}.
	 * @param ctx the parse tree
	 */
	void exitBitwiseShiftLeft(Expressions_v1Parser.BitwiseShiftLeftContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#bitwiseShiftRight}.
	 * @param ctx the parse tree
	 */
	void enterBitwiseShiftRight(Expressions_v1Parser.BitwiseShiftRightContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#bitwiseShiftRight}.
	 * @param ctx the parse tree
	 */
	void exitBitwiseShiftRight(Expressions_v1Parser.BitwiseShiftRightContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#bitwiseAnd}.
	 * @param ctx the parse tree
	 */
	void enterBitwiseAnd(Expressions_v1Parser.BitwiseAndContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#bitwiseAnd}.
	 * @param ctx the parse tree
	 */
	void exitBitwiseAnd(Expressions_v1Parser.BitwiseAndContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#bitwiseOr}.
	 * @param ctx the parse tree
	 */
	void enterBitwiseOr(Expressions_v1Parser.BitwiseOrContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#bitwiseOr}.
	 * @param ctx the parse tree
	 */
	void exitBitwiseOr(Expressions_v1Parser.BitwiseOrContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#logicalAnd}.
	 * @param ctx the parse tree
	 */
	void enterLogicalAnd(Expressions_v1Parser.LogicalAndContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#logicalAnd}.
	 * @param ctx the parse tree
	 */
	void exitLogicalAnd(Expressions_v1Parser.LogicalAndContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#logicalOr}.
	 * @param ctx the parse tree
	 */
	void enterLogicalOr(Expressions_v1Parser.LogicalOrContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#logicalOr}.
	 * @param ctx the parse tree
	 */
	void exitLogicalOr(Expressions_v1Parser.LogicalOrContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#equal}.
	 * @param ctx the parse tree
	 */
	void enterEqual(Expressions_v1Parser.EqualContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#equal}.
	 * @param ctx the parse tree
	 */
	void exitEqual(Expressions_v1Parser.EqualContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#notEqual}.
	 * @param ctx the parse tree
	 */
	void enterNotEqual(Expressions_v1Parser.NotEqualContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#notEqual}.
	 * @param ctx the parse tree
	 */
	void exitNotEqual(Expressions_v1Parser.NotEqualContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#lessThan}.
	 * @param ctx the parse tree
	 */
	void enterLessThan(Expressions_v1Parser.LessThanContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#lessThan}.
	 * @param ctx the parse tree
	 */
	void exitLessThan(Expressions_v1Parser.LessThanContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#greaterThan}.
	 * @param ctx the parse tree
	 */
	void enterGreaterThan(Expressions_v1Parser.GreaterThanContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#greaterThan}.
	 * @param ctx the parse tree
	 */
	void exitGreaterThan(Expressions_v1Parser.GreaterThanContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#plus}.
	 * @param ctx the parse tree
	 */
	void enterPlus(Expressions_v1Parser.PlusContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#plus}.
	 * @param ctx the parse tree
	 */
	void exitPlus(Expressions_v1Parser.PlusContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#minus}.
	 * @param ctx the parse tree
	 */
	void enterMinus(Expressions_v1Parser.MinusContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#minus}.
	 * @param ctx the parse tree
	 */
	void exitMinus(Expressions_v1Parser.MinusContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#highByte}.
	 * @param ctx the parse tree
	 */
	void enterHighByte(Expressions_v1Parser.HighByteContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#highByte}.
	 * @param ctx the parse tree
	 */
	void exitHighByte(Expressions_v1Parser.HighByteContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#lowByte}.
	 * @param ctx the parse tree
	 */
	void enterLowByte(Expressions_v1Parser.LowByteContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#lowByte}.
	 * @param ctx the parse tree
	 */
	void exitLowByte(Expressions_v1Parser.LowByteContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#logicalNot}.
	 * @param ctx the parse tree
	 */
	void enterLogicalNot(Expressions_v1Parser.LogicalNotContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#logicalNot}.
	 * @param ctx the parse tree
	 */
	void exitLogicalNot(Expressions_v1Parser.LogicalNotContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#literal}.
	 * @param ctx the parse tree
	 */
	void enterLiteral(Expressions_v1Parser.LiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#literal}.
	 * @param ctx the parse tree
	 */
	void exitLiteral(Expressions_v1Parser.LiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#numericLiteral}.
	 * @param ctx the parse tree
	 */
	void enterNumericLiteral(Expressions_v1Parser.NumericLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#numericLiteral}.
	 * @param ctx the parse tree
	 */
	void exitNumericLiteral(Expressions_v1Parser.NumericLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#alphanumericLiteral}.
	 * @param ctx the parse tree
	 */
	void enterAlphanumericLiteral(Expressions_v1Parser.AlphanumericLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#alphanumericLiteral}.
	 * @param ctx the parse tree
	 */
	void exitAlphanumericLiteral(Expressions_v1Parser.AlphanumericLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#binaryLiteral}.
	 * @param ctx the parse tree
	 */
	void enterBinaryLiteral(Expressions_v1Parser.BinaryLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#binaryLiteral}.
	 * @param ctx the parse tree
	 */
	void exitBinaryLiteral(Expressions_v1Parser.BinaryLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#octalLiteral}.
	 * @param ctx the parse tree
	 */
	void enterOctalLiteral(Expressions_v1Parser.OctalLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#octalLiteral}.
	 * @param ctx the parse tree
	 */
	void exitOctalLiteral(Expressions_v1Parser.OctalLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#decimalLiteral}.
	 * @param ctx the parse tree
	 */
	void enterDecimalLiteral(Expressions_v1Parser.DecimalLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#decimalLiteral}.
	 * @param ctx the parse tree
	 */
	void exitDecimalLiteral(Expressions_v1Parser.DecimalLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#hexLiteral}.
	 * @param ctx the parse tree
	 */
	void enterHexLiteral(Expressions_v1Parser.HexLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#hexLiteral}.
	 * @param ctx the parse tree
	 */
	void exitHexLiteral(Expressions_v1Parser.HexLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#characterLiteral}.
	 * @param ctx the parse tree
	 */
	void enterCharacterLiteral(Expressions_v1Parser.CharacterLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#characterLiteral}.
	 * @param ctx the parse tree
	 */
	void exitCharacterLiteral(Expressions_v1Parser.CharacterLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#stringLiteral}.
	 * @param ctx the parse tree
	 */
	void enterStringLiteral(Expressions_v1Parser.StringLiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#stringLiteral}.
	 * @param ctx the parse tree
	 */
	void exitStringLiteral(Expressions_v1Parser.StringLiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link Expressions_v1Parser#identifier}.
	 * @param ctx the parse tree
	 */
	void enterIdentifier(Expressions_v1Parser.IdentifierContext ctx);
	/**
	 * Exit a parse tree produced by {@link Expressions_v1Parser#identifier}.
	 * @param ctx the parse tree
	 */
	void exitIdentifier(Expressions_v1Parser.IdentifierContext ctx);
}