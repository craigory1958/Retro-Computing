    1:                    ;
    2:                    ;
    3:                    ;              666666  555555  333333  000000
    4:                    ;              6       5            3  0    0
    5:                    ;              6       5            3  0    0
    6:                    ;              666666  555555  333333  0    0
    7:                    ;              6    6       5       3  0    0
    8:                    ;              6    6       5       3  0    0
    9:                    ;              666666  666666  666666  000000
   10:                    ;
   11:                    ;
   12:                    ;
   13:                    ;                      000000  000000  333333
   14:                    ;                      0    0  0    0       3
   15:                    ;              ------  0    0  0    0       3
   16:                    ;              ------  0    0  0    0  333333
   17:                    ;              ------  0    0  0    0       3
   18:                    ;                      0    0  0    0       3
   19:                    ;                      000000  000000  333333
   20:                    ;
   21:                    ;
   22:                    ;
   23:                    ;
   24:                    ;
   25:                    ;      COPYRIGHT
   26:                    ;      MOS TECHNOLOGY, INC
   27:                    ;      DATE: OCT 18, 1975 REV-D
   28:                    ;
   29:                    ;
   30:                    ;
   31:                    ;      6530-003 I.C. IS AN AUDIO CASSETT TAPE
   32:                    ;      RECORDER ENTENSION OF THE BASIC
   33:                    ;      KIM MONITOR
   34:                    ;
   35:                    ;      IT FEATURES TWO BASIC ROUTINES
   36:                    ;      LOADT-LOAD MEM FROM AUDIO TAPE
   37:                    ;      DUMPT-STOR MEM ONTO AUDIO TAPE
   38:                    ;
   39:                    ;      LOADT
   40:                    ;        ID=00     IGNORE ID
   41:                    ;        ID=FF     IGN. ID USE SA FOR START ADDR
   42:                    ;        ID=01-FE  IGN.ID USE ADDRESS ON TAPE
   43:                    ;
   44:                    ;      DUMPT
   45:                    ;        ID=00     SHOULD NOT BE USED
   46:                    ;        ID=FF     SHOULD NOT BE USED
   47:                    ;        ID=01-FE  NORMAL ID RANGE
   48:                    ;        SAL       LSB STARTING ADDRESS OF PROGRAM
   49:                    ;        SAH       MSB
   50:                    ;        EAL       ENDING ADDRESS OF PROGRAM
   51:                    ;        EAH       MSB
   52:                    ;
   53:                    ;
   54:                    ;
   55:                    ;       EQUATES
   56:                    ;       SET UP FOR 6530-002 I/O
   57:                    ;
   58:                    SAD     .equ $1740          ; 6530 A DATA
   59:                    PADD    .equ $1741          ; 6530 A DATA DIRECTION
   60:                    SBD     .equ $1742          ; 6530 B DATA
   61:                    PBDD    .equ $1743          ; 6530 B DATA DIRECTION
   62:                    CLK1T   .equ $1744          ; DIV BY 1 TIME
   63:                    CLK8T   .equ $1745          ; DIV BY 8 TIME
   64:                    CLK64T  .equ $1746          ; DIV BY 64 TIME
   65:                    CLKKT   .equ $1747          ; DIV BY 1024 TIME
   66:                    CLKRDI  .equ $1747          ; READ TIME OUT BIT
   67:                    CLKRDT  .equ $1746          ; READ TIME
   68:                    ;
   69:                            .org $00EF
   70:                    ;       MPU REG.  SAVX AREA IN PAGE 0
   71:                    ;
   72:                    PCL     .byte $00           ; PROGRAM CNT LOW
   73:                    PCH     .byte $00           ; PROGRAM CNT HI
   74:                    PREG    .byte $00           ; CURRENT STATUS REG
   75:                    SPUSER  .byte $00           ; CURRENT STACK POINTER
   76:                    ACC     .byte $00           ; ACCUMULATOR
   77:                    YREG    .byte $00           ; Y INDEX
   78:                    XREG    .byte $00           ; X INDEX
   79:                    ;
   80:                    ;       KIM FIXED AREA IN PAGE 0
   81:                    ;
   82:                    CHKHI   .byte $00
   83:                    CHKSUM  .byte $00
   84:                    INL     .byte $00           ; INPUT BUFFER
   85:                    INH     .byte $00           ; INPUT BUFFER
   86:                    POINTL  .byte $00           ; LSB OF OPEN CELL
   87:                    POINTH  .byte $00           ; MSB OF OPEN CELL
   88:                    TEMP    .byte $00
   89:                    TMPX    .byte $00
   90:                    CHAR    .byte $00
   91:                    MODE    .byte $00
   92:                    ;
   93:                    ;       KIM FIXED AREA IN PAGE 23
   94:                    ;
   95:                            .org $17E7
   96:                    CHKL    .byte $00
   97:                    CHKH    .byte $00           ; CHKSUM
   98:                    SAVX    .byte $00, $00, $00
   99:                    VEB     .byte $00, $00, $00, $00, $00, $00           ; VOLATILE EXECUTION BLOCK
  100:                    CNTL30  .byte $00           ; TTY DELAY
  101:                    CNTH30  .byte $00           ; TTY DELAY
  102:                    TIMH    .byte $00
  103:                    SAL     .byte $00           ; LOW STARTING ADDRESS
  104:                    SAH     .byte $00           ; HI STARTING ADDRESS
  105:                    EAL     .byte $00           ; LOW ENDING ADDRESS
  106:                    EAH     .byte $00           ; HI ENDING ADDRESS
  107:                    ID      .byte $00           ; TAPE PROGRAM ID NUMBER
  108:                    ;
  109:                    ;       INTERRUPT VECTORS
  110:                    ;
  111:                    NMIV    .byte $00, $00           ; STOP VECTOR (STOP=1C00)
  112:                    RSTV    .byte $00, $00           ; RST VECTOR
  113:                    IRQV    .byte $00, $00           ; IRQ VECTOR (BRK= 1C00)
  114:                    ;
  115:                    ;
  116:                            .org $1800
  117:                    ;
  118:                    ;       INIT VOLATILE EXECUTION BLOCK
  119:                    ;       DUMP MEM TO TAPE
  120:                    ;
  121:  0000 A9 AD        DUMPT   LDA   #$AD      ; LOAD ABSOLUTE INST
  122:  0002 85 00                STA   VEB
  123:  0004 20 12 01             JSR   INTVEB
  124:                    ;
  125:  0007 A9 27                LDA   #$27      ; TURN OFF DATAIN PB5
  126:  0009 85 00                STA   SBD
  127:  000B A9 BF                LDA   #$BF      ; CONVERT PB7 TO OUTPUT
  128:  000D 85 00                STA   PBDD
  129:                    ;
  130:  000F A2 64                LDX   #$64      ; 100 CHARS
  131:  0011 A9 16        DUMPT1  LDA   #$16      ; SYNC CHAR'S
  132:  0013 20 4F 01             JSR   OUTCHT
  133:  0016 CA                   DEX
  134:  0017 D0 F8                BNE   DUMPT1
  135:                    ;
  136:                    ;
  137:  0019 A9 2A                LDA   #$2A      ; START CHAR
  138:  001B 20 4F 01             JSR   OUTCHT
  139:                    ;
  140:  001E A5 00                LDA   ID         ; OUTPUT ID
  141:  0020 20 36 01             JSR   OUTBT
  142:                    ;
  143:  0023 A5 00                LDA   SAL       ; OUTPUT STARTING
  144:  0025 20 33 01             JSR   OUTBTC    ; ADDRESS
  145:  0028 A5 00                LDA   SAH
  146:  002A 20 33 01             JSR   OUTBTC
  147:                    ;
  148:  002D A5 01        DUMPT2  LDA   VEB+1     ; CHECK FOR LAST
  149:  002F C5 00                CMP   EAL       ; DATA BYTE
  150:  0031 A5 02                LDA   VEB+2
  151:  0033 E5 00                SBC   EAH
  152:  0035 90 22                BCC   DUMPT4
  153:                    ;
  154:  0037 A9 2F                LDA   #'/      ; OUTPUT END OF DATA CHAR
  155:  0039 20 4F 01             JSR   OUTCHT
  156:  003C A5 00                LDA   CHKL      ; LAST BYTE HAS BEEN
  157:  003E 20 36 01             JSR   OUTBT     ; OUT PUT   NOW OUTPUT
  158:  0041 A5 00                LDA   CHKH      ; CHKSUM
  159:  0043 20 36 01             JSR   OUTBT
  160:                    ;
  161:                    ;
  162:  0046 A2 02                LDX   #$02      ; 2 CHAR'S
  163:  0048 A9 04        DUMPT3  LDA   #$04      ; EOT CHAR
  164:  004A 20 4F 01             JSR   OUTCHT
  165:  004D CA                   DEX
  166:  004E D0 F8                BNE   DUMPT3
  167:                    ;
  168:  0050 A9 00                LDA   #$00      ; DISPLAY 0000
  169:  0052 85 00                STA   POINTL    ; FOR NORMAL EXIT
  170:  0054 85 00                STA   POINTH
  171:  0056 4C 8D 02             JMP   START
  172:                    ;
  173:  0059 20 00 00     DUMPT4  JSR   VEB       ; DATA BYTE OUTPUT
  174:  005C 20 33 01             JSR   OUTBTC
  175:                    ;
  176:  005F 20 AF 01             JSR   INCVEB
  177:  0062 4C 2D 00             JMP   DUMPT2
  178:                    ;
  179:                    ;       LOAD MEMORY FROM TAPE
  180:                    ;
  181:                    ;
  182:                    TAB     .WORD LOAD12
  183:  0065 A9 8D        LOADT   LDA   #$8D      ; INIT VOLATILE EXECUTION
  184:  0067 85 00                STA   VEB       ; BLOCK WITH STA ABS.
  185:  0069 20 12 01             JSR   INTVEB
  186:                    ;
  187:  006C A9 4C                LDA   #$4C      ; JUMP TYPE RTRN
  188:  006E 85 03                STA   VEB+3
  189:  0070 A5 65                LDA   TAB
  190:  0072 85 04                STA   VEB+4
  191:  0074 A5 66                LDA   TAB+1
  192:  0076 85 05                STA   VEB+5
  193:                    ;
  194:  0078 A9 07                LDA   #$07      ; RESET PB5=0 (DATA-IN)
  195:  007A 85 00                STA   SBD
  196:                    ;
  197:  007C A9 FF        SYNC    LDA   #$FF      ; CLEAR SAVX FOR SYNC CHAR
  198:  007E 85 00                STA   SAVX
  199:                    ;
  200:  0080 20 FC 01     SYNC1   JSR   RDBIT     ; GET A BIT
  201:  0083 46 00                LSR   SAVX      ; SHIFT BIT INTO CHAR
  202:  0085 05 00                ORA   SAVX
  203:  0087 85 00                STA   SAVX
  204:  0089 A5 00                LDA   SAVX      ; GET NEW CHAR
  205:  008B C9 16                CMP   #$16      ; SYNC CHAR
  206:  008D D0 F1                BNE   SYNC1
  207:                    ;
  208:  008F A2 0A                LDX   #$0A      ; TEST FOR 10 SYNC CHARS
  209:  0091 20 E5 01     SYNC2   JSR   RDCHT
  210:  0094 C9 16                CMP   #$16
  211:  0096 D0 E4                BNE   SYNC      ; IF NOT 10 CHAR, RE-SYNC
  212:  0098 CA                   DEX
  213:  0099 D0 F6                BNE   SYNC2
  214:                    ;
  215:                    ;
  216:  009B 20 E5 01     LOADT4  JSR   RDCHT     ; LOOK FOR START OF
  217:  009E C9 2A                CMP   #$2A      ; DATA CHAR
  218:  00A0 F0 06                BEQ   LOAD11
  219:  00A2 C9 16                CMP   #$16      ; IF NOT, SHOULD BE SYN
  220:  00A4 D0 D6                BNE   SYNC
  221:  00A6 F0 F3                BEQ   LOADT4
  222:                    ;
  223:  00A8 20 B6 01     LOAD11  JSR   RDBYT     ; READ ID FROM TAPE
  224:  00AB C5 00                CMP   ID        ; COMPARE WITH REQUESTED ID
  225:  00AD F0 0C                BEQ   LOADT5
  226:  00AF A5 00                LDA   ID        ; DEFAULT 00, READ RECORD
  227:  00B1 C9 00                CMP   #$00      ; ANYWAY
  228:  00B3 F0 06                BEQ   LOADT5
  229:  00B5 C9 FF                CMP   #$FF      ; DEFAULT FF, IGNORE SA ON
  230:  00B7 F0 15                BEQ   LOADT6    ; TAPE
  231:  00B9 D0 AA                BNE   LOADT
  232:                    ;
  233:  00BB 20 B6 01     LOADT5  JSR   RDBYT     ; GET SA FROM TAPE
  234:  00BE 20 25 01             JSR   CHKT
  235:  00C1 85 01                STA   VEB+1     ; SAVX IN VEB+1,2
  236:  00C3 20 B6 01             JSR   RDBYT
  237:  00C6 20 25 01             JSR   CHKT
  238:  00C9 85 02                STA   VEB+2
  239:  00CB 4C DA 00             JMP   LOADT7
  240:                    ;
  241:  00CE 20 B6 01     LOADT6  JSR   RDBYT     ; GET SA BUT IGNORE
  242:  00D1 20 25 01             JSR   CHKT
  243:  00D4 20 B6 01             JSR   RDBYT
  244:  00D7 20 25 01             JSR   CHKT
  245:                    ;
  246:                    ;
  247:  00DA A2 02        LOADT7  LDX   #$02      ; GET 2 CHARS
  248:  00DC 20 E5 01     LOAD13  JSR   RDCHT     ; GET CHAR (X)
  249:  00DF C9 2F                CMP   #$2F      ; LOOK FOR LAST CHAR
  250:  00E1 F0 14                BEQ   LOADT8
  251:  00E3 20 C3 01             JSR   PACKT     ; CONVERT TO HEX
  252:  00E6 D0 21                BNE   LOADT9    ; Y=1 NON-HEX CHAR
  253:  00E8 CA                   DEX
  254:  00E9 D0 F1                BNE   LOAD13
  255:                    ;
  256:  00EB 20 25 01             JSR   CHKT      ; COMPUTE CHECKSUM
  257:  00EE 4C 00 00             JMP   VEB       ; SAVX DATA IN MEMORY
  258:  00F1 20 AF 01     LOAD12  JSR   INCVEB    ; INCREMENT DATA POINTER
  259:  00F4 4C DA 00             JMP   LOADT7
  260:                    ;
  261:  00F7 20 B6 01     LOADT8  JSR   RDBYT     ; END OF DATA, COMPARE CHKSUM
  262:  00FA C5 00                CMP   CHKL
  263:  00FC D0 0B                BNE   LOADT9
  264:  00FE 20 B6 01             JSR   RDBYT
  265:  0101 C5 00                CMP   CHKH
  266:  0103 D0 04                BNE   LOADT9
  267:  0105 A9 00                LDA   #$00      ; NORMAL EXIT
  268:  0107 F0 02                BEQ   LOAD10
  269:                    ;
  270:  0109 A9 FF        LOADT9  LDA   #$FF      ; ERROR EXIT
  271:  010B 85 00        LOAD10  STA   POINTL
  272:  010D 85 00                STA   POINTH
  273:  010F 4C 8D 02             JMP   START
  274:                    ;
  275:                    ;
  276:                    ;
  277:                    ;       SUBROUTINES FOLLOW
  278:                    ;
  279:                    ;       SUB TO MOVE SA TO VEB+1,2
  280:                    ;
  281:  0112 A5 00        INTVEB  LDA   SAL       ; MOVE SA TO VEB+1,2
  282:  0114 85 01                STA   VEB+1
  283:  0116 A5 00                LDA   SAH
  284:  0118 85 02                STA   VEB+2
  285:  011A A9 60                LDA   #$60      ; RTS INST
  286:  011C 85 03                STA   VEB+3
  287:  011E A9 00                LDA   #$00      ; CLEAR CHKSUM AREA
  288:  0120 85 00                STA   CHKL
  289:  0122 85 00                STA   CHKH
  290:  0124 60                   RTS
  291:                    ;
  292:                    ;       COMPUTE CHKSUM FOR TAPE LOAD
  293:                    ;       RTN USES Y TO SAVEX A
  294:                    ;
  295:  0125 A8           CHKT    TAY
  296:  0126 18                   CLC
  297:  0127 65 00                ADC   CHKL
  298:  0129 85 00                STA   CHKL
  299:  012B A5 00                LDA   CHKH
  300:  012D 69 00                ADC   #$00
  301:  012F 85 00                STA   CHKH
  302:  0131 98                   TYA
  303:  0132 60                   RTS
  304:                    ;
  305:                    ;       OUTPUT ONE BYTE USE Y
  306:                    ;       TO SAVX BYTE
  307:                    ;
  308:  0133 20 25 01     OUTBTC  JSR   CHKT      ; COMPARE CHKSUM
  309:  0136 A8           OUTBT   TAY             ; SAVX DATA BYTE
  310:  0137 4A                   LSR   A         ; SHIFT OFF LSD
  311:  0138 4A                   LSR   A
  312:  0139 4A                   LSR   A
  313:  013A 4A                   LSR   A
  314:  013B 20 44 01             JSR   HEXOUT    ; OUTPUT MSD
  315:  013E 98                   TYA
  316:  013F 20 44 01             JSR   HEXOUT    ; OUTPUT LSD
  317:  0142 98                   TYA
  318:  0143 60                   RTS
  319:                    ;
  320:                    ;       CONVERT LSD OF A TO ASCII
  321:                    ;       OUTPUT TO TAPE
  322:                    ;
  323:  0144 29 0F        HEXOUT  AND   #$0F
  324:  0146 C9 0A                CMP   #$0A
  325:  0148 18                   CLC
  326:  0149 30 02                BMI   HEX1
  327:  014B 69 07                ADC   #$07
  328:  014D 69 30        HEX1    ADC   #$30
  329:                    ;
  330:                    ;       OUTPUT TO TAPE ONE ASCII
  331:                    ;       CHAR  USE SUB'S ONE + ZRO
  332:                    ;
  333:  014F 86 00        OUTCHT  STX   SAVX
  334:  0151 84 01                STY   SAVX+1
  335:  0153 A0 08                LDY   #$08      ; START BIT
  336:  0155 20 6F 01     CHT1    JSR   ONE
  337:  0158 4A                   LSR   A         ; GET DATA BIT
  338:  0159 B0 06                BCS   CHT2
  339:  015B 20 6F 01             JSR   ONE       ; DATA BIT=1
  340:  015E 4C 64 01             JMP   CHT3
  341:  0161 20 8F 01     CHT2    JSR   ZRO       ; DATA BIT=0
  342:  0164 20 8F 01     CHT3    JSR   ZRO
  343:  0167 88                   DEY
  344:  0168 D0 EB                BNE   CHT1
  345:  016A A6 00                LDX   SAVX
  346:  016C A4 01                LDY   SAVX+1
  347:  016E 60                   RTS
  348:                    ;
  349:                    ;
  350:                    ;       OUTPUT 1 TO TAPE
  351:                    ;       9 PULSES, 138 MICROSEC EACH
  352:                    ;
  353:  016F A2 09        ONE     LDX   #$09
  354:  0171 48                   PHA             ; SAVX A
  355:  0172 24 00        ONE1    BIT   CLKRDI    ; WAIT FOR TIME OUT
  356:  0174 10 FC                BPL   ONE1
  357:  0176 A9 7E                LDA   #126
  358:  0178 85 00                STA   CLK1T
  359:  017A A9 A7                LDA   #$A7
  360:  017C 85 00                STA   SBD       ; SET PB7=1
  361:  017E 24 00        ONE2    BIT   CLKRDI
  362:  0180 10 FC                BPL   ONE2
  363:  0182 A9 7E                LDA   #126
  364:  0184 85 00                STA   CLK1T
  365:  0186 A9 27                LDA   #$27
  366:  0188 85 00                STA   SBD       ; RESET PB7=0
  367:  018A CA                   DEX
  368:  018B D0 E5                BNE   ONE1
  369:  018D 68                   PLA
  370:  018E 60                   RTS
  371:                    ;
  372:                    ;
  373:                    ;       OUTPUT 0 TO TAPE
  374:                    ;       6 PULSES, 207 MICROSEC EACH
  375:                    ;
  376:  018F A2 06        ZRO     LDX   #$06
  377:  0191 48                   PHA             ; SAVX A
  378:  0192 24 00        ZRO1    BIT   CLKRDI
  379:  0194 10 FC                BPL   ZRO1
  380:  0196 A9 C3                LDA   #$C3
  381:  0198 85 00                STA   CLK1T
  382:  019A A9 A7                LDA   #$A7
  383:  019C 85 00                STA   SBD       ; SET PB7=1
  384:  019E 24 00        ZRO2    BIT   CLKRDI
  385:  01A0 10 FC                BPL   ZRO2
  386:  01A2 A9 C3                LDA   #195
  387:  01A4 85 00                STA   CLK1T
  388:  01A6 A9 27                LDA   #$27
  389:  01A8 85 00                STA   SBD       ; RESET PB7=0
  390:  01AA CA                   DEX
  391:  01AB D0 E5                BNE   ZRO1
  392:  01AD 68                   PLA             ; RESTORE A
  393:  01AE 60                   RTS
  394:                    ;
  395:                    ;       SUB TO INC VEB+1,2
  396:                    ;
  397:  01AF E6 01        INCVEB  INC   VEB+1
  398:  01B1 D0 02                BNE   INCVE1
  399:  01B3 E6 02                INC   VEB+2
  400:  01B5 60           INCVE1  RTS
  401:                    ;
  402:                    ;       SUB TO READ BYTE FROM TAPE
  403:                    ;
  404:  01B6 20 E5 01     RDBYT   JSR   RDCHT
  405:  01B9 20 C3 01             JSR   PACKT
  406:  01BC 20 E5 01             JSR   RDCHT
  407:  01BF 20 C3 01             JSR   PACKT
  408:  01C2 60                   RTS
  409:                    ;
  410:                    ;       PACK A=ASCII INTO SAVX
  411:                    ;       AS HEX DATA
  412:                    ;
  413:  01C3 C9 30        PACKT   CMP   #$30
  414:  01C5 30 1C                BMI   PACKT3
  415:  01C7 C9 47                CMP   #$47
  416:  01C9 10 18                BPL   PACKT3
  417:  01CB C9 40                CMP   #$40
  418:  01CD 30 03                BMI   PACKT1
  419:  01CF 18                   CLC
  420:  01D0 69 09                ADC   #$09
  421:  01D2 2A           PACKT1  ROL   A
  422:  01D3 2A                   ROL   A
  423:  01D4 2A                   ROL   A
  424:  01D5 2A                   ROL   A
  425:  01D6 A0 04                LDY   #$04
  426:  01D8 2A           PACKT2  ROL   A
  427:  01D9 26 00                ROL   SAVX
  428:  01DB 88                   DEY
  429:  01DC D0 FA                BNE   PACKT2
  430:  01DE A5 00                LDA   SAVX
  431:  01E0 A0 00                LDY   #$00      ; Y=0 VALID HEX CHAR
  432:  01E2 60                   RTS
  433:  01E3 C8           PACKT3  INY             ; Y=1 NOT HEX
  434:  01E4 60                   RTS
  435:                    ;
  436:                    ;       GET 1 CHAR FROM TAPE AND RETURN
  437:                    ;       WITH CHAR IN A  USE SAVX+1 TO ASM CHAR
  438:                    ;
  439:  01E5 86 02        RDCHT   STX   SAVX+2
  440:  01E7 A2 08                LDX   #$08      ; READ 8 BITS
  441:  01E9 20 FC 01     RDCHT1  JSR   RDBIT     ; GET NEXT DATA BIT
  442:  01EC 46 01                LSR   SAVX+1    ; RIGHT SHIFT CHAR
  443:  01EE 05 01                ORA   SAVX+1    ; OR IN SIGN BIT
  444:  01F0 85 01                STA   SAVX+1    ; REPLACE CHAR
  445:  01F2 CA                   DEX
  446:  01F3 D0 F4                BNE   RDCHT1
  447:                    ;
  448:  01F5 A5 01                LDA   SAVX+1    ; MOVE CHAR INTO A
  449:  01F7 2A                   ROL   A         ; SHIFT OFF PARITY
  450:  01F8 4A                   LSR   A
  451:  01F9 A6 02                LDX   SAVX+2
  452:  01FB 60                   RTS
  453:                    ;
  454:                    ;       THIS SUB GETS ONE BIT FROM
  455:                    ;       TAPE AND RETURNS IT IN SIGN OF A
  456:                    ;
  457:  01FC 24 00        RDBIT   BIT   SBD       ; WAIT FOR END OF START BIT
  458:  01FE 10 FC                BPL   RDBIT
  459:  0200 A5 00                LDA   CLKRDT    ; GET START BIT TIME
  460:  0202 A0 FF                LDY   #$FF      ; A=256-T1
  461:  0204 84 00                STY   CLK64T    ; SET UP TIMER
  462:                    ;
  463:  0206 A0 14                LDY   #$14
  464:  0208 88           RDBIT3  DEY             ; DELAY 100 MICROSEC
  465:  0209 D0 FD                BNE   RDBIT3
  466:                    ;
  467:  020B 24 00        RDBIT2  BIT   SBD
  468:  020D 30 FC                BMI   RDBIT2    ; WAIT FOR NEXT START BIT
  469:                    
  470:  020F 38                   SEC
  471:  0210 E5 00                SBC   CLKRDT    ; (256-T1)-(256-T2)=T2-T1
  472:  0212 A0 FF                LDY   #$FF
  473:  0214 84 00                STY   CLK64T    ; SET UP TIMER FOR NEXT BIT
  474:                    
  475:  0216 A0 07                LDY   #$07
  476:  0218 88           RDBIT4  DEY             ; DELAY 50 MICROSEC
  477:  0219 D0 FD                BNE   RDBIT4
  478:                    ;
  479:  021B 49 FF                EOR   #$FF      ; COMPLEMENT SIGN OF A
  480:  021D 29 80                AND   #$80      ; MASK ALL EXCEPT SIGN
  481:  021F 60           RTS
  482:                    ;
  483:                    ;
  484:                    ;       DIAGNOSTICS
  485:                    ;          MEMORY
  486:                    ;          PLLCAL
  487:                    ;
  488:                    ;
  489:                    ;
  490:                    ;       PLLCAL OUTPUT 166 MICROSEC
  491:                    ;       PULSE STRING
  492:                    ;
  493:  0220 A9 27        PLLCAL  LDA   #$27
  494:  0222 85 00                STA   SBD       ; TURN OFF DATIN PB5=1
  495:  0224 A9 BF                LDA   #$BF      ; CONVERT PB7 TO OUTPUT
  496:  0226 85 00                STA   PBDD
  497:                    ;
  498:  0228 24 00        PLL1    BIT   CLKRDI
  499:  022A 10 FC                BPL   PLL1
  500:  022C A9 9A                LDA   #154      ; WAIT 166 MICROSEC
  501:  022E 85 00                STA   CLK1T
  502:  0230 A9 A7                LDA   #$A7      ; OUTPUT PB7=1
  503:  0232 85 00                STA   SBD
  504:                    ;
  505:  0234 24 00        PLL2    BIT   CLKRDI
  506:  0236 10 FC                BPL   PLL2
  507:  0238 A9 9A                LDA   #154
  508:  023A 85 00                STA   CLK1T
  509:  023C A9 27                LDA   #$27      ; PB7=0
  510:  023E 85 00                STA   SBD
  511:  0240 4C 28 02             JMP   PLL1
  512:                    ;
  513:                    ;
  514:                    ;       INTERRUPTS PAGE 27
  515:                    ;
  516:                            .ORG    $1FBA        ; RESERVED FOR TEST
  517:                    NMIP27  .WORD PLLCAL
  518:                    RSTP27  .WORD PLLCAL
  519:                    IRQP27  .WORD PLLCAL
  520:                    ;
  521:                    ;
  522:                    ;
  523:                    ;
  524:                    ;
  525:                    ;
  526:                    ;              666666  555555  333333  000000
  527:                    ;              6       5            3  0    0
  528:                    ;              6       5            3  0    0
  529:                    ;              666666  555555  333333  0    0
  530:                    ;              6    6       5       3  0    0
  531:                    ;              6    6       5       3  0    0
  532:                    ;              666666  666666  666666  000000
  533:                    ;
  534:                    ;
  535:                    ;
  536:                    ;                      000000  000000  222222
  537:                    ;                      0    0  0    0       2
  538:                    ;              ------  0    0  0    0       2
  539:                    ;              ------  0    0  0    0  222222
  540:                    ;              ------  0    0  0    0  2
  541:                    ;                      0    0  0    0  2
  542:                    ;                      000000  000000  222222
  543:                    ;
  544:                    ;
  545:                    ;
  546:                    ;
  547:                    ;
  548:                    ;          COPYRIGHT
  549:                    ;          MOS TECHNOLOGY INC.
  550:                    ;          DATE  OCT 13 1975    REV E
  551:                    ;
  552:                    ;    KIM   :TTY INTERFACE
  553:                    ;          :KEYBOARD INTERFACE
  554:                    ;          :7 SEG 6 DIGIT DISPLAY
  555:                    ;
  556:                    ;
  557:                    ;    TTY CMDS:
  558:                    ;          G   GOEXEC
  559:                    ;          CR  OPEN NEXT CELL
  560:                    ;          LF  OPEN PREV. CELL
  561:                    ;          .   MODIFY OPEN CELL
  562:                    ;          SP  OPEN NEW CELL
  563:                    ;          L   LOAD (OBJECT FORMAT)
  564:                    ;          Q   DUMP  FROM OPEN CELL ADDR TO HI LIMIT
  565:                    ;          RO  RUB OUT  - RETURN TO START  (KIM)
  566:                    ;              ((ALL ILLEGAL CHARS ARE IGNORED))
  567:                    ;
  568:                    ;    KEYBOARD COMMANDS:
  569:                    ;        ADDR  SETS MODE TO MODIFY CELL ADDRESS
  570:                    ;        DATA  SETS MODE TO MODIFY DATA IN OPEN CELL
  571:                    ;        STEP  INCREMENTS TO NEXT CELL
  572:                    ;        RST   SYSTEM RESET
  573:                    ;        RUN   GOEXEC
  574:                    ;        STOP  $1C00 CAN BE LOADED INTO NMIV TO
  575:                    ;              USE STOP FEATURE
  576:                    ;        PC    DISPLAY PC
  577:                    ;
  578:                    ;        CLOCK IS NOT DISABLED IN SIGMA 1
  579:                    ;
  580:                    ;
  581:                    ;
  582:                    ;
  583:                    ;
  584:                            .ORG    $1C00
  585:                    ;
  586:                    ;
  587:  0243 85 00        SAVE    STA   ACC       ; KIM ENTRY VIA STOP (NMI)
  588:  0245 68                   PLA             ; OR BRK (IRQ)
  589:  0246 85 00                STA   PREG
  590:  0248 68                   PLA             ; KIM ENTRY VIA JSR (A LOST)
  591:  0249 85 00                STA   PCL
  592:  024B 85 00                STA   POINTL
  593:  024D 68                   PLA
  594:  024E 85 00                STA   PCH
  595:  0250 85 00                STA   POINTH
  596:  0252 84 00                STY   YREG
  597:  0254 86 00                STX   XREG
  598:  0256 BA                   TSX
  599:  0257 86 00                STX   SPUSER
  600:  0259 20 BF 04             JSR   INITS
  601:  025C 4C 8D 02             JMP   START
  602:                    ;
  603:  025F 6C 00 00     NMIT    JMP   [NMIV]    ; NON-MASKABLE INTERRUPT TRAP
  604:  0262 6C 00 00     IRQT    JMP   [IRQV]    ; INTERRUPT TRAP
  605:                    ;
  606:  0265 A2 FF        RST     LDX   #$FF      ; KIM ENTRY VIA RST
  607:  0267 9A                   TXS
  608:  0268 86 00                STX   SPUSER
  609:  026A 20 BF 04             JSR   INITS
  610:                    ;
  611:                    ;
  612:  026D A9 FF        DETCPS  LDA   #$FF      ; COUNT START BIT
  613:  026F 85 00                STA   CNTH30    ; ZERO CNTH30
  614:  0271 A9 01                LDA   #$01      ; MASK HI ORDER BITS
  615:  0273 24 00        DET1    BIT   SAD       ; TEST
  616:  0275 D0 16                BNE   START     ; KEYBD SSW TEST
  617:  0277 30 FA                BMI   DET1      ; START BIT TEST
  618:  0279 A9 FC                LDA   #$FC
  619:  027B 18           DET3    CLC             ; THIS LOOP COUNTS
  620:  027C 69 01                ADC   #$01      ; THE START BIT TIME
  621:  027E 90 02                BCC   DET2
  622:  0280 E6 00                INC   CNTH30
  623:  0282 A4 00        DET2    LDY   SAD       ; CHECK FOR END OF START BIT
  624:  0284 10 F5                BPL   DET3
  625:  0286 85 00                STA   CNTL30
  626:  0288 A2 08                LDX   #$08
  627:  028A 20 A2 04             JSR   GET5      ; GET REST OF THE CHAR, TEST CHAR
  628:                    ;
  629:                    ;
  630:                    ;
  631:                    ;
  632:                    ;
  633:                    ;
  634:                    ;       MAKE TTY/KB SELECTION
  635:                    ;
  636:  028D 20 C3 04     START   JSR   INIT1
  637:  0290 A9 01                LDA   #$01
  638:  0292 24 00                BIT   SAD
  639:  0294 D0 1E                BNE   TTYKB
  640:  0296 20 68 04             JSR   CRLF      ; PRT CR LF
  641:  0299 A2 0A                LDX   #$0A      ; TYPE OUT KIM
  642:  029B 20 6A 04             JSR   PRTST
  643:  029E 4C E8 03             JMP   SHOW1
  644:                    ;
  645:  02A1 A9 00        CLEAR   LDA   #$00
  646:  02A3 85 00                STA   INL       ; CLEAR INPUT BUFFER
  647:  02A5 85 00                STA   INH
  648:  02A7 20 93 04     READ    JSR   GETCH     ; GET CHAR
  649:  02AA C9 01                CMP   #$01
  650:  02AC F0 06                BEQ   TTYKB
  651:  02AE 20 C8 05             JSR   PACK
  652:  02B1 4C 14 04             JMP   SCAN
  653:                    ;
  654:                    ;       MAIN ROUTINE FOR KEY BOARD
  655:                    ;       AND DISPLAY
  656:                    ;
  657:  02B4 20 3B 05     TTYKB   JSR   SCAND     ; IF A=0 NO KEY
  658:  02B7 D0 D4                BNE   START
  659:  02B9 A9 01        TTYKB1  LDA   #$01
  660:  02BB 24 00                BIT   SAD
  661:  02BD F0 CE                BEQ   START
  662:  02BF 20 3B 05             JSR   SCAND
  663:  02C2 F0 F5                BEQ   TTYKB1
  664:  02C4 20 3B 05             JSR   SCAND
  665:  02C7 F0 F0                BEQ   TTYKB1
  666:                    ;
  667:  02C9 20 86 05     GETK    JSR   GETKEY
  668:  02CC C9 15                CMP   #$15
  669:  02CE 10 BD                BPL   START
  670:  02D0 C9 14                CMP   #$14
  671:  02D2 F0 44                BEQ   PCCMD     ; DISPLAY PC
  672:  02D4 C9 10                CMP   #$10      ; ADDR MODE=1
  673:  02D6 F0 2C                BEQ   ADDRM
  674:  02D8 C9 11                CMP   #$11      ; DATA MODE=1
  675:  02DA F0 2C                BEQ   DATAM
  676:  02DC C9 12                CMP   #$12      ; STEP
  677:  02DE F0 2F                BEQ   STEP
  678:  02E0 C9 13                CMP   #$13      ; RUN
  679:  02E2 F0 31                BEQ   GOV
  680:  02E4 0A           DATA    ASL   A         ; SHIFT CHAR INTO HIGH
  681:  02E5 0A                   ASL   A         ; ORDER NIBBLE
  682:  02E6 0A                   ASL   A
  683:  02E7 0A                   ASL   A
  684:  02E8 85 00                STA   TEMP      ; STORE IN TEMP
  685:  02EA A2 04                LDX   #$04
  686:  02EC A4 00        DATA1   LDY   MODE      ; TEST MODE 1=ADDR
  687:  02EE D0 0A                BNE   ADDR      ; MODE=0 DATA
  688:  02F0 B1 00                LDA   [POINTL],Y ; GET DATA
  689:  02F2 06 00                ASL   TEMP      ; SHIFT CHAR
  690:  02F4 2A                   ROL   A         ; SHIFT DATA
  691:  02F5 91 00                STA   [POINTL],Y ; STORE OUT DATA
  692:  02F7 4C FF 02             JMP   DATA2
  693:                    ;
  694:  02FA 0A           ADDR    ASL   A         ; SHIFT CHAR
  695:  02FB 26 00                ROL   POINTL    ; SHIFT ADDR
  696:  02FD 26 00                ROL   POINTH    ; SHIFT ADDR HI
  697:  02FF CA           DATA2   DEX
  698:  0300 D0 EA                BNE   DATA1     ; DO 4 TIMES
  699:  0302 F0 08                BEQ   DATAM2    ; EXIT HERE
  700:                    ;
  701:  0304 A9 01        ADDRM   LDA   #$01
  702:  0306 D0 02                BNE   DATAM1
  703:                    ;
  704:  0308 A9 00        DATAM   LDA   #$00
  705:  030A 85 00        DATAM1  STA   MODE
  706:  030C 4C 8D 02     DATAM2  JMP   START
  707:                    ;
  708:  030F 20 7F 05     STEP    JSR   INCPT
  709:  0312 4C 8D 02             JMP   START
  710:                    ;
  711:  0315 4C 01 04     GOV     JMP   GOEXEC
  712:                    ;
  713:                    ;
  714:                    ;       DISPLAY PC BY MOVING
  715:                    ;       PC TO POINT
  716:                    ;
  717:  0318 A5 00        PCCMD   LDA   PCL
  718:  031A 85 00                STA   POINTL
  719:  031C A5 00                LDA   PCH
  720:  031E 85 00                STA   POINTH
  721:  0320 4C 8D 02             JMP   START
  722:                    ;
  723:                    ;       LOAD PAPER TAPE FROM TTY
  724:                    ;
  725:  0323 20 93 04     LOAD    JSR   GETCH     ; LOOK FOR FIRST CHAR
  726:  0326 C9 3B                CMP   #$3B      ; SMICOLON
  727:  0328 D0 F9                BNE   LOAD
  728:  032A A9 00                LDA   #$00
  729:  032C 85 00                STA   CHKSUM
  730:  032E 85 00                STA   CHKHI
  731:                    ;
  732:  0330 20 B9 05             JSR   GETBYT    ; GET BYTE CNT
  733:  0333 AA                   TAX             ; SAVE IN X INDEX
  734:  0334 20 AD 05             JSR   CHK       ; COMPUTE CHKSUM
  735:                    ;
  736:  0337 20 B9 05             JSR   GETBYT    ; GET ADDRESS HI
  737:  033A 85 00                STA   POINTH
  738:  033C 20 AD 05             JSR   CHK
  739:  033F 20 B9 05             JSR   GETBYT    ; GET ADDRESS LO
  740:  0342 85 00                STA   POINTL
  741:  0344 20 AD 05             JSR   CHK
  742:                    ;
  743:  0347 8A                   TXA             ; IF CNT=0 DONT
  744:  0348 F0 0F                BEQ   LOAD3     ; GET ANY DATA
  745:                    ;
  746:  034A 20 B9 05     LOAD2   JSR   GETBYT    ; GET DATA
  747:  034D 91 00                STA   [POINTL],Y ; STORE DATA
  748:  034F 20 AD 05             JSR   CHK
  749:  0352 20 7F 05             JSR   INCPT     ; NEXT ADDRESS
  750:  0355 CA                   DEX
  751:  0356 D0 F2                BNE   LOAD2
  752:  0358 E8                   INX             ; X=1 DATA RECORD
  753:                    ;                       ; X=0 LAST RECORD
  754:  0359 20 B9 05     LOAD3   JSR   GETBYT    ; COMPARE CHKSUM
  755:  035C C5 00                CMP   CHKHI
  756:  035E D0 16                BNE   LOADE1
  757:  0360 20 B9 05             JSR   GETBYT
  758:  0363 C5 00                CMP   CHKSUM
  759:  0365 D0 12                BNE   LOADER
  760:                    ;
  761:  0367 8A                   TXA             ; X=0 LAST RECORD
  762:  0368 D0 B9                BNE   LOAD
  763:                    ;
  764:  036A A2 0C        LOAD7   LDX   #$0C      ; X-OFF KIM
  765:  036C A9 27        LOAD8   LDA   #$27
  766:  036E 85 00                STA   SBD       ; DISABLE DATA IN
  767:  0370 20 6A 04             JSR   PRTST
  768:  0373 4C 8D 02             JMP   START
  769:                    ;
  770:  0376 20 B9 05     LOADE1  JSR   GETBYT    ; DUMMY
  771:  0379 A2 11        LOADER  LDX   #$11      ; X-OFF ERR KIM
  772:  037B D0 EF                BNE   LOAD8
  773:                    ;
  774:                    ;       DUMP TO TTY
  775:                    ;       FROM OPEN CELL ADDRESS
  776:                    ;       TO LIMHL,LIMHH
  777:                    ;
  778:  037D A9 00        DUMP    LDA   #$00
  779:  037F 85 00                STA   INL
  780:  0381 85 00                STA   INH       ; CLEAR RECORD COUNT
  781:  0383 A9 00        DUMP0   LDA   #$00
  782:  0385 85 00                STA   CHKHI     ; CLEAR CHKSUM
  783:  0387 85 00                STA   CHKSUM
  784:                    ;
  785:  0389 20 68 04             JSR   CRLF      ; PRINT CR LF
  786:  038C A9 3B                LDA   #$3B      ; PRINT SEMICOLON
  787:  038E 20 D4 04             JSR   OUTCH
  788:  0391 A5 00                LDA   POINTL    ; TEST POINT GT OR ET
  789:  0393 C5 00                CMP   EAL       ; HI LIMIT GOTO EXIT
  790:  0395 A5 00                LDA   POINTH
  791:  0397 E5 00                SBC   EAH
  792:  0399 90 18                BCC   DUMP4
  793:                    ;
  794:  039B A9 00                LDA   #$00      ; PRINT LAST RECORD
  795:  039D 20 74 04             JSR   PRTBYT    ; 0 BYTES
  796:  03A0 20 E8 05             JSR   OPEN
  797:  03A3 20 57 04             JSR   PRTPNT
  798:                    ;
  799:  03A6 A5 00                LDA   CHKHI     ; PRINT CHKSUM
  800:  03A8 20 74 04             JSR   PRTBYT    ; FOR LAST RECORD
  801:  03AB A5 00                LDA   CHKSUM
  802:  03AD 20 74 04             JSR   PRTBYT
  803:  03B0 4C A1 02             JMP   CLEAR
  804:                    ;
  805:  03B3 A9 18        DUMP4   LDA   #$18      ; PRINT 24 BYTE COUNT
  806:  03B5 AA                   TAX             ; SAVE AS INDEX
  807:  03B6 20 74 04             JSR   PRTBYT
  808:  03B9 20 AD 05             JSR   CHK
  809:  03BC 20 57 04             JSR   PRTPNT
  810:                    ;
  811:  03BF A0 00        DUMP2   LDY   #$00      ; PRINT 24 BYTES
  812:  03C1 B1 00                LDA   [POINTL],Y ; GET DATA
  813:  03C3 20 74 04             JSR   PRTBYT    ; PRINT DATA
  814:  03C6 20 AD 05             JSR   CHK       ; COMPUTE CHKSUM
  815:  03C9 20 7F 05             JSR   INCPT     ; INCREMENT POINT
  816:  03CC CA                   DEX
  817:  03CD D0 F0                BNE   DUMP2
  818:                    ;
  819:  03CF A5 00                LDA   CHKHI     ; PRINT CHKSUM
  820:  03D1 20 74 04             JSR   PRTBYT
  821:  03D4 A5 00                LDA   CHKSUM
  822:  03D6 20 74 04             JSR   PRTBYT
  823:  03D9 E6 00                INC   INL       ; INCR RECORD COUNT
  824:  03DB D0 02                BNE   DUMP3
  825:  03DD E6 00                INC   INH
  826:  03DF 4C 83 03     DUMP3   JMP   DUMP0
  827:                    ;
  828:  03E2 20 E8 05     SPACE   JSR   OPEN      ; OPEN NEW CELL
  829:  03E5 20 68 04     SHOW    JSR   CRLF      ; PRINT CR LF
  830:  03E8 20 57 04     SHOW1   JSR   PRTPNT
  831:  03EB 20 D2 04             JSR   OUTSP     ; PRINT SPACE
  832:  03EE A0 00                LDY   #$00      ; PRINT DATA SPECIFIED
  833:  03F0 B1 00                LDA   [POINTL],Y ; BY POINT AD=LDA EXT
  834:  03F2 20 74 04             JSR   PRTBYT
  835:  03F5 20 D2 04             JSR   OUTSP     ; PRINT SPACE
  836:  03F8 4C A1 02             JMP   CLEAR
  837:                    ;
  838:  03FB 20 7F 05     RTRN    JSR   INCPT     ; OPEN NEXT CELL
  839:  03FE 4C E5 03             JMP   SHOW
  840:                    ;
  841:  0401 A6 00        GOEXEC  LDX   SPUSER
  842:  0403 9A                   TXS
  843:  0404 A5 00                LDA   POINTH    ; PROGRAM RUNS FROM
  844:  0406 48                   PHA             ; OPEN CELL ADDRESS
  845:  0407 A5 00                LDA   POINTL
  846:  0409 48                   PHA
  847:  040A A5 00                LDA   PREG
  848:  040C 48                   PHA
  849:  040D A6 00                LDX   XREG      ; RESTORE REGS
  850:  040F A4 00                LDY   YREG
  851:  0411 A5 00                LDA   ACC
  852:  0413 40                   RTI
  853:                    ;
  854:  0414 C9 20        SCAN    CMP   #$20      ; OPEN CELL
  855:  0416 F0 CA                BEQ   SPACE
  856:  0418 C9 7F                CMP   #$7F      ; RUB OUT (KIM)
  857:  041A F0 1B                BEQ   STV
  858:  041C C9 0D                CMP   #$0D      ; NEXT CELL
  859:  041E F0 DB                BEQ   RTRN
  860:  0420 C9 0A                CMP   #$0A      ; PREV CELL
  861:  0422 F0 1C                BEQ   FEED
  862:  0424 C9 2E                CMP   #'.'      ; MODIFY CELL
  863:  0426 F0 26                BEQ   MODIFY
  864:  0428 C9 47                CMP   #'G'      ; GO EXEC
  865:  042A F0 D5                BEQ   GOEXEC
  866:  042C C9 51                CMP   #'Q'      ; DUMP FROM OPEN CELL TO HI LIMIT
  867:  042E F0 0A                BEQ   DUMPV
  868:  0430 C9 4C                CMP   #'L'      ; LOAD TAPE
  869:  0432 F0 09                BEQ   LOADV
  870:  0434 4C A7 02             JMP   READ      ; IGNORE ILLEGAL CHAR
  871:                    ;
  872:  0437 4C 8D 02     STV     JMP   START
  873:  043A 4C 7D 03     DUMPV   JMP   DUMP
  874:  043D 4C 23 03     LOADV   JMP   LOAD
  875:                    ;
  876:  0440 38           FEED    SEC
  877:  0441 A5 00                LDA   POINTL    ; DEC DOUBLE BYTE
  878:  0443 E9 01                SBC   #$01      ; AT POINTL AND POINTH
  879:  0445 85 00                STA   POINTL
  880:  0447 B0 02                BCS   FEED1
  881:  0449 C6 00                DEC   POINTH
  882:  044B 4C E5 03     FEED1   JMP   SHOW
  883:                    ;
  884:  044E A0 00        MODIFY  LDY   #$00      ; GET CONTENTS OF INPUT BUFF
  885:  0450 A5 00                LDA   INL       ; INL AND STORE IN LOC
  886:  0452 91 00                STA   [POINTL],Y ; SPECIFIED BY POINT
  887:  0454 4C FB 03             JMP   RTRN
  888:                    ;
  889:                    ;       END OF MAIN LINE
  890:                    ;
  891:                    ;       SUBROUTINES FOLLOW
  892:                    ;
  893:                    ;
  894:                    ;
  895:                    ;       SUB TO PRINT POINTL,POINTH
  896:                    ;
  897:  0457 A5 00        PRTPNT  LDA   POINTH
  898:  0459 20 74 04             JSR   PRTBYT
  899:  045C 20 AD 05             JSR   CHK
  900:  045F A5 00                LDA   POINTL
  901:  0461 20 74 04             JSR   PRTBYT
  902:  0464 20 AD 05             JSR   CHK
  903:  0467 60                   RTS
  904:                    ;
  905:                    ;       PRINT STRING OF ASCII CHARS FROM
  906:                    ;       TOP+X TO TOP
  907:                    ;
  908:  0468 A2 07        CRLF    LDX   #$07
  909:  046A BD F1 05     PRTST   LDA   TOP,X
  910:  046D 20 D4 04             JSR   OUTCH
  911:  0470 CA                   DEX
  912:  0471 10 F7                BPL   PRTST     ; STOP ON INDEX ZERO
  913:  0473 60                   RTS
  914:                    ;
  915:                    ;       PRINT 1 HEX BYTE AS TWO ASCII CHAR'S
  916:                    ;
  917:  0474 85 00        PRTBYT  STA   TEMP
  918:  0476 4A                   LSR   A         ; SHIFT CHAR RIGHT 4 BITS
  919:  0477 4A                   LSR   A
  920:  0478 4A                   LSR   A
  921:  0479 4A                   LSR   A
  922:  047A 20 85 04             JSR   HEXTA     ; CONVERT TO HEX AND PRINT
  923:  047D A5 00                LDA   TEMP      ; GET OTHER HALF
  924:  047F 20 85 04             JSR   HEXTA     ; CONVERT TO HEX AND PRINT
  925:  0482 A5 00                LDA   TEMP      ; RESTORE BYTE IN A AND RETURN
  926:  0484 60                   RTS
  927:                    ;
  928:  0485 29 0F        HEXTA   AND   #$0F      ; MASK HI 4 BITS
  929:  0487 C9 0A                CMP   #$0A
  930:  0489 18                   CLC
  931:  048A 30 02                BMI   HEXTA1
  932:  048C 69 07                ADC   #$07      ; ALPHA HEX
  933:  048E 69 30        HEXTA1  ADC   #$30      ; DEC HEX
  934:  0490 4C D4 04             JMP   OUTCH     ; PRINT CHAR
  935:                    ;
  936:                    ;       GET 1 CHAR FROM TTY
  937:                    ;       CHAR IN A
  938:                    ;       X IS PRESERVED AND Y RETURNED = FF
  939:                    ;
  940:  0493 86 00        GETCH   STX   TMPX      ; SAVE X REG
  941:  0495 A2 08                LDX   #$08      ; SET UP 8-BIT CNT
  942:  0497 A9 01                LDA   #$01
  943:  0499 24 00        GET1    BIT   SAD
  944:  049B D0 21                BNE   GET6
  945:  049D 30 FA                BMI   GET1      ; WAIT FOR START BIT
  946:  049F 20 02 05             JSR   DELAY     ; DELAY 1 BIT
  947:  04A2 20 14 05     GET5    JSR   DEHALF    ; DELAY 1/2 BIT TIME
  948:  04A5 A5 00        GET2    LDA   SAD       ; GET 8 BITS
  949:  04A7 29 80                AND   #$80      ; MASK OFF LOW ORDER BITS
  950:  04A9 46 00                LSR   CHAR      ; SHIFT RIGHT CHAR
  951:  04AB 05 00                ORA   CHAR
  952:  04AD 85 00                STA   CHAR
  953:  04AF 20 02 05             JSR   DELAY     ; DELAY 1 BIT TIME
  954:  04B2 CA                   DEX
  955:  04B3 D0 F0                BNE   GET2      ; GET NEXT CHAR
  956:  04B5 20 14 05             JSR   DEHALF    ; EXIT THIS RTN
  957:                    ;
  958:  04B8 A6 00                LDX   TMPX
  959:  04BA A5 00                LDA   CHAR
  960:  04BC 2A                   ROL   A         ; SHIFT OFF PARITY
  961:  04BD 4A                   LSR   A
  962:  04BE 60           GET6    RTS
  963:                    ;
  964:                    ;       INITIALIZATION FOR SIGMA
  965:                    ;
  966:  04BF A2 01        INITS   LDX   #$01      ; SET KB MODE TO ADDR
  967:  04C1 86 00                STX   MODE
  968:                    ;
  969:  04C3 A2 00        INIT1   LDX   #$00
  970:  04C5 86 00                STX   PADD      ; FOR SIGMA USE SADD
  971:  04C7 A2 3F                LDX   #$3F
  972:  04C9 86 00                STX   PBDD      ; FOR SIGMA USE SBDD
  973:  04CB A2 07                LDX   #$07      ; ENABLE DATA IN
  974:  04CD 86 00                STX   SBD       ; OUTPUT
  975:  04CF D8                   CLD
  976:  04D0 78                   SEI
  977:  04D1 60                   RTS
  978:                    ;
  979:                    ;       PRINT 1 CHAR   CHAR IN A
  980:                    ;       X IS PRESERVED  Y RETURNED = FF
  981:                    ;       OUTSP   PRINTS 1 SPACE
  982:                    ;
  983:  04D2 A9 20        OUTSP   LDA   #$20
  984:  04D4 85 00        OUTCH   STA   CHAR
  985:  04D6 86 00                STX   TMPX
  986:  04D8 20 02 05             JSR   DELAY     ; 10/11 BIT CODE SYNC
  987:  04DB A5 00                LDA   SBD       ; START BIT
  988:  04DD 29 FE                AND   #$FE
  989:  04DF 85 00                STA   SBD
  990:  04E1 20 02 05             JSR   DELAY
  991:  04E4 A2 08                LDX   #$08
  992:  04E6 A5 00        OUT1    LDA   SBD       ; DATA BIT
  993:  04E8 29 FE                AND   #$FE
  994:  04EA 46 00                LSR   CHAR
  995:  04EC 69 00                ADC   #$00
  996:  04EE 85 00                STA   SBD
  997:  04F0 20 02 05             JSR   DELAY
  998:  04F3 CA                   DEX
  999:  04F4 D0 F0                BNE   OUT1
 1000:  04F6 A5 00                LDA   SBD       ; STOP BIT
 1001:  04F8 09 01                ORA   #$01
 1002:  04FA 85 00                STA   SBD
 1003:  04FC 20 02 05             JSR   DELAY     ; STOP BIT
 1004:  04FF A6 00                LDX   TMPX      ; RESTORE INDEX
 1005:  0501 60                   RTS
 1006:                    ;
 1007:                    ;       DELAY 1 BIT TIME
 1008:                    ;       AS DETERMEND BY DETCPS
 1009:                    ;
 1010:  0502 A5 00        DELAY   LDA   CNTH30    ; THIS LOOP SIMULATES
 1011:  0504 85 00                STA   TIMH      ; DETCPS SECTION AND WILL DELAY
 1012:  0506 A5 00                LDA   CNTL30    ; 1 BIT TIME
 1013:  0508 38           DE2     SEC
 1014:  0509 E9 01        DE4     SBC   #$01
 1015:  050B B0 02                BCS   DE3
 1016:  050D C6 00                DEC   TIMH
 1017:  050F A4 00        DE3     LDY   TIMH
 1018:  0511 10 F5                BPL   DE2
 1019:  0513 60                   RTS
 1020:                    ;
 1021:                    ;                         DELAY 1/2 BIT TIME
 1022:  0514 A5 00        DEHALF  LDA   CNTH30    ; DOUBLE RIGHT SHIFT OF DELAY
 1023:  0516 85 00                STA   TIMH      ; CONSTANT FOR A DIV BY 2
 1024:  0518 A5 00                LDA   CNTL30
 1025:  051A 4A                   LSR   A
 1026:  051B 46 00                LSR   TIMH
 1027:  051D 90 E9                BCC   DE2
 1028:  051F 09 80                ORA   #$80
 1029:  0521 B0 E6                BCS   DE4
 1030:                    ;
 1031:                    ;       SUB TO DETERMINE IF KEY IS
 1032:                    ;       DEPRESSED OR CONDITION OF SSW
 1033:                    ;             KEY NOT DEP OR TTY MODE    A = 0
 1034:                    ;             KEY DEP OR KB MODE      A NOT ZERO
 1035:                    ;
 1036:                    ;
 1037:  0523 A0 03        AK      LDY   #$03      ; 3 ROWS
 1038:  0525 A2 01                LDX   #$01      ; DIGIT 0
 1039:                    ;
 1040:  0527 A9 FF        ONEKEY  LDA   #$FF
 1041:  0529 86 00        AK1     STX   SBD       ; OUTPUT DIGIT
 1042:  052B E8                   INX             ; GET NEXT DIGIT
 1043:  052C E8                   INX
 1044:  052D 25 00                AND   SAD       ; INPUT SEGMENTS
 1045:  052F 88                   DEY
 1046:  0530 D0 F7                BNE   AK1
 1047:                    ;
 1048:  0532 A0 07                LDY   #$07
 1049:  0534 84 00                STY   SBD
 1050:                    ;
 1051:  0536 09 80                ORA   #$80
 1052:  0538 49 FF                EOR   #$FF
 1053:  053A 60                   RTS
 1054:                    ;
 1055:                    ;       SUB  OUTPUT TO 7-SEGMENT DISPLAY
 1056:                    ;
 1057:  053B A0 00        SCAND   LDY   #$00      ; GET DATA SPECIFIED
 1058:  053D B1 00                LDA   [POINTL],Y ; BY POINT
 1059:  053F 85 00                STA   INH       ; SET UP DISPLAY BUFFER
 1060:  0541 A9 7F        SCANDS  LDA   #$7F      ; CHANGE SEG
 1061:  0543 85 00                STA   PADD      ; TO OUTPUT
 1062:                    ;
 1063:  0545 A2 09                LDX   #$09      ; INIT DIGIT NUMBER
 1064:  0547 A0 03                LDY   #$03      ; OUTPUT 3 BYTES
 1065:                    ;
 1066:  0549 B9 00 00     SCAND1  LDA   INL,Y     ; GET BYTE
 1067:  054C 4A                   LSR   A         ; GET MSD
 1068:  054D 4A                   LSR   A
 1069:  054E 4A                   LSR   A
 1070:  054F 4A                   LSR   A
 1071:  0550 20 67 05             JSR   CONVD     ; OUTPUT CHAR
 1072:  0553 B9 00 00             LDA   INL,Y     ; GET BYTE AGAIN
 1073:  0556 29 0F                AND   #$0F      ; GET LSD
 1074:  0558 20 67 05             JSR   CONVD     ; OUTPUT CHAR
 1075:  055B 88                   DEY             ; SET UP FOR NXT BYTE
 1076:  055C D0 EB                BNE   SCAND1
 1077:  055E 86 00                STX   SBD       ; ALL DIGITS OFF
 1078:  0560 A9 00                LDA   #$00      ; CHANGE SEGMENT
 1079:  0562 85 00                STA   PADD      ; TO INPUTS
 1080:  0564 4C 23 05             JMP   AK        ; GET ANY KEY
 1081:                    ;
 1082:                    ;       CONVERT AND DISPLAY HEX
 1083:                    ;       USED BY SCAND ONLY
 1084:                    ;
 1085:  0567 84 00        CONVD   STY   TEMP      ; SAVE Y
 1086:  0569 A8                   TAY             ; USE CHAR AS INDEX
 1087:  056A B9 F1 05             LDA   TABLE,Y   ; LOOKUP CONVERSION
 1088:  056D A0 00                LDY   #$00      ; TURN OFF SEGMENTS
 1089:  056F 84 00                STY   SAD
 1090:  0571 86 00                STX   SBD       ; OUTPUT DIGIT ENABLE
 1091:  0573 85 00                STA   SAD       ; OUT PUT SEGMENTS
 1092:                    ;
 1093:  0575 A0 7F                LDY   #$7F      ; DELAY 500 CYCLES APPROX.
 1094:  0577 88           CONVD1  DEY
 1095:  0578 D0 FD                BNE   CONVD1
 1096:                    ;
 1097:  057A E8                   INX             ; GET NEXT DIGIT NUMBER
 1098:  057B E8                   INX             ; ADD 2
 1099:  057C A4 00                LDY   TEMP      ; RESTORE Y
 1100:  057E 60                   RTS
 1101:                    ;
 1102:                    ;       SUB TO INCREMENT POINT
 1103:                    ;
 1104:  057F E6 00        INCPT   INC   POINTL
 1105:  0581 D0 02                BNE   INCPT2
 1106:  0583 E6 00                INC   POINTH
 1107:  0585 60                   INCPT2  RTS
 1108:                    ;
 1109:                    ;       GET KEY FROM KEY BOARD
 1110:                    ;       RETURN WITH A=KEY VALUE
 1111:                    ;       GT. 15 THEN ILLEGAL OR NO KEY
 1112:                    ;
 1113:                    ;
 1114:  0586 A2 21        GETKEY  LDX   #$21      ; START AT DIGIT 0
 1115:  0588 A0 01        GETKE5  LDY   #$01      ; GET 1 ROW
 1116:  058A 20 27 05             JSR   ONEKEY
 1117:  058D D0 07                BNE   KEYIN     ; A=0 NO KEY
 1118:  058F E0 27                CPX   #$27      ; TEST FOR DIGIT 2
 1119:  0591 D0 F5                BNE   GETKE5
 1120:  0593 A9 15                LDA   #$15      ; 15=NOKEY
 1121:  0595 60                   RTS
 1122:  0596 A0 FF        KEYIN   LDY   #$FF
 1123:  0598 0A           KEYIN1  ASL   A         ; SHIFT LEFT
 1124:  0599 B0 03                BCS   KEYIN2    ; UNTIL Y=KEY NUM
 1125:  059B C8                   INY
 1126:  059C 10 FA                BPL   KEYIN1
 1127:  059E 8A           KEYIN2  TXA
 1128:  059F 29 0F                AND   #$0F      ; MASK MSD
 1129:  05A1 4A                   LSR   A         ; DIVIDE BY 2
 1130:  05A2 AA                   TAX
 1131:  05A3 98                   TYA
 1132:  05A4 10 03                BPL   KEYIN4
 1133:  05A6 18           KEYIN3  CLC
 1134:  05A7 69 07                ADC   #$07      ; MULT (X-1) TIMES A
 1135:  05A9 CA           KEYIN4  DEX
 1136:  05AA D0 FA                BNE   KEYIN3
 1137:  05AC 60                   RTS
 1138:                    ;
 1139:                    ;       SUB TO COMPUTE CHECK SUM
 1140:                    ;
 1141:  05AD 18           CHK     CLC
 1142:  05AE 65 00                ADC   CHKSUM
 1143:  05B0 85 00                STA   CHKSUM
 1144:  05B2 A5 00                LDA   CHKHI
 1145:  05B4 69 00                ADC   #$00
 1146:  05B6 85 00                STA   CHKHI
 1147:  05B8 60                   RTS
 1148:                    ;
 1149:                    ;       GET 2 HEX CHAR'S AND PACK
 1150:                    ;       INTO INL AND INH
 1151:                    ;       X PRESERVED  Y RETURNED = 0
 1152:                    ;       NON HEX CHAR WILL BE LOADED AS NEAREST HEX EQU
 1153:                    ;
 1154:  05B9 20 93 04     GETBYT  JSR   GETCH
 1155:  05BC 20 C8 05             JSR   PACK
 1156:  05BF 20 93 04             JSR   GETCH
 1157:  05C2 20 C8 05             JSR   PACK
 1158:  05C5 A5 00                LDA   INL
 1159:  05C7 60                   RTS
 1160:                    ;
 1161:                    ;       SHIFT CHAR IN A INTO
 1162:                    ;       INL AND INH
 1163:                    ;
 1164:  05C8 C9 30        PACK    CMP   #$30      ; CHECK FOR HEX
 1165:  05CA 30 1B                BMI   UPDAT2
 1166:  05CC C9 47                CMP   #$47      ; NOT HEX EXIT
 1167:  05CE 10 17                BPL   UPDAT2
 1168:  05D0 C9 40                CMP   #$40      ; CONVERT TO HEX
 1169:  05D2 30 03                BMI   UPDATE
 1170:  05D4 18                   CLC
 1171:  05D5 69 09                ADC   #$09
 1172:  05D7 2A           UPDATE  ROL   A
 1173:  05D8 2A                   ROL   A
 1174:  05D9 2A                   ROL   A
 1175:  05DA 2A                   ROL   A
 1176:  05DB A0 04                LDY   #$04      ; SHIFT INTO I/O BUFFER
 1177:  05DD 2A           UPDAT1  ROL   A
 1178:  05DE 26 00                ROL   INL
 1179:  05E0 26 00                ROL   INH
 1180:  05E2 88                   DEY
 1181:  05E3 D0 F8                BNE   UPDAT1
 1182:  05E5 A9 00                LDA   #$00      ; A=0 IF HEX NUM
 1183:  05E7 60           UPDAT2  RTS
 1184:                    ;
 1185:  05E8 A5 00        OPEN    LDA   INL       ; MOVE I/O BUFFER TO POINT
 1186:  05EA 85 00                STA   POINTL
 1187:  05EC A5 00                LDA   INH       ; TRANSFER INH- POINTH
 1188:  05EE 85 00                STA   POINTH
 1189:  05F0 60                   RTS
 1190:                    ;
 1191:                    ;
 1192:                    ;       END OF SUBROUTINES
 1193:                    ;
 1194:                    ;
 1195:                    ;       TABLES
 1196:                    ;
 1197:                    TOP     .BYTE   $00, $00, $00, $00, $00, $00, $0A, $0D, "MIK", " ", $13, "RRE", " ", $13
 1198:                    ;
 1199:                    ;               TABLE HEX TO 7 SEGMENT
 1200:                    ;               0    1    2    3    4    5    6    7
 1201:                    TABLE   .BYTE   $BF, $86, $DB, $CF, $E6, $ED, $FD, $87
 1202:                    
 1203:                    ;               8    9    A    B    C    D    E    F
 1204:                            .BYTE   $FF, $EF, $F7, $FC, $B9, $DE, $F9, $F1
 1205:                    ;
 1206:                    ;
 1207:                    ;
 1208:                    ;
 1209:                    ;
 1210:                    ;       INTERRUPT VECTORS
 1211:                    ;
 1212:                            .ORG    $1FFA
 1213:                    NMIENT  .WORD   NMIT
 1214:                    RSTENT  .WORD   RST
 1215:                    IRQENT  .WORD   IRQT
 1216:                            .END
 1217:                    
