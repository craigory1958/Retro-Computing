    1:                    ;
    2:                    ;
    3:                    ;              666666  555555  333333  000000
    4:                    ;              6       5            3  0    0
    5:                    ;              6       5            3  0    0
    6:                    ;              666666  555555  333333  0    0
    7:                    ;              6    6       5       3  0    0
    8:                    ;              6    6       5       3  0    0
    9:                    ;              666666  666666  666666  000000
   10:                    ;
   11:                    ;
   12:                    ;
   13:                    ;                      000000  000000  333333
   14:                    ;                      0    0  0    0       3
   15:                    ;              ------  0    0  0    0       3
   16:                    ;              ------  0    0  0    0  333333
   17:                    ;              ------  0    0  0    0       3
   18:                    ;                      0    0  0    0       3
   19:                    ;                      000000  000000  333333
   20:                    ;
   21:                    ;
   22:                    ;
   23:                    ;
   24:                    ;
   25:                    ;      COPYRIGHT
   26:                    ;      MOS TECHNOLOGY, INC
   27:                    ;      DATE: OCT 18, 1975 REV-D
   28:                    ;
   29:                    ;
   30:                    ;
   31:                    ;      6530-003 I.C. IS AN AUDIO CASSETT TAPE
   32:                    ;      RECORDER ENTENSION OF THE BASIC
   33:                    ;      KIM MONITOR
   34:                    ;
   35:                    ;      IT FEATURES TWO BASIC ROUTINES
   36:                    ;      LOADT-LOAD MEM FROM AUDIO TAPE
   37:                    ;      DUMPT-STOR MEM ONTO AUDIO TAPE
   38:                    ;
   39:                    ;      LOADT
   40:                    ;        ID=00     IGNORE ID
   41:                    ;        ID=FF     IGN. ID USE SA FOR START ADDR
   42:                    ;        ID=01-FE  IGN.ID USE ADDRESS ON TAPE
   43:                    ;
   44:                    ;      DUMPT
   45:                    ;        ID=00     SHOULD NOT BE USED
   46:                    ;        ID=FF     SHOULD NOT BE USED
   47:                    ;        ID=01-FE  NORMAL ID RANGE
   48:                    ;        SAL       LSB STARTING ADDRESS OF PROGRAM
   49:                    ;        SAH       MSB
   50:                    ;        EAL       ENDING ADDRESS OF PROGRAM
   51:                    ;        EAH       MSB
   52:                    ;
   53:                    ;
   54:                    ;
   55:                    ;       EQUATES
   56:                    ;       SET UP FOR 6530-002 I/O
   57:                    ;
   58:                    SAD     .equ $1740          ; 6530 A DATA
   59:                    PADD    .equ $1741          ; 6530 A DATA DIRECTION
   60:                    SBD     .equ $1742          ; 6530 B DATA
   61:                    PBDD    .equ $1743          ; 6530 B DATA DIRECTION
   62:                    CLK1T   .equ $1744          ; DIV BY 1 TIME
   63:                    CLK8T   .equ $1745          ; DIV BY 8 TIME
   64:                    CLK64T  .equ $1746          ; DIV BY 64 TIME
   65:                    CLKKT   .equ $1747          ; DIV BY 1024 TIME
   66:                    CLKRDI  .equ $1747          ; READ TIME OUT BIT
   67:                    CLKRDT  .equ $1746          ; READ TIME
   68:                    ;
   69:                            .org $00EF
   70:                    ;       MPU REG.  SAVX AREA IN PAGE 0
   71:                    ;
   72:                    PCL     .byte $00           ; PROGRAM CNT LOW
   73:                    PCH     .byte $00           ; PROGRAM CNT HI
   74:                    PREG    .byte $00           ; CURRENT STATUS REG
   75:                    SPUSER  .byte $00           ; CURRENT STACK POINTER
   76:                    ACC     .byte $00           ; ACCUMULATOR
   77:                    YREG    .byte $00           ; Y INDEX
   78:                    XREG    .byte $00           ; X INDEX
   79:                    ;
   80:                    ;       KIM FIXED AREA IN PAGE 0
   81:                    ;
   82:                    CHKHI   .byte $00
   83:                    CHKSUM  .byte $00
   84:                    INL     .byte $00           ; INPUT BUFFER
   85:                    INH     .byte $00           ; INPUT BUFFER
   86:                    POINTL  .byte $00           ; LSB OF OPEN CELL
   87:                    POINTH  .byte $00           ; MSB OF OPEN CELL
   88:                    TEMP    .byte $00
   89:                    TMPX    .byte $00
   90:                    CHAR    .byte $00
   91:                    MODE    .byte $00
   92:                    ;
   93:                    ;       KIM FIXED AREA IN PAGE 23
   94:                    ;
   95:                            .org $17E7
   96:                    CHKL    .byte $00
   97:                    CHKH    .byte $00           ; CHKSUM
   98:                    SAVX    .byte $00, $00, $00
   99:                    VEB     .byte $00, $00, $00, $00, $00, $00           ; VOLATILE EXECUTION BLOCK
  100:                    CNTL30  .byte $00           ; TTY DELAY
  101:                    CNTH30  .byte $00           ; TTY DELAY
  102:                    TIMH    .byte $00
  103:                    SAL     .byte $00           ; LOW STARTING ADDRESS
  104:                    SAH     .byte $00           ; HI STARTING ADDRESS
  105:                    EAL     .byte $00           ; LOW ENDING ADDRESS
  106:                    EAH     .byte $00           ; HI ENDING ADDRESS
  107:                    ID      .byte $00           ; TAPE PROGRAM ID NUMBER
  108:                    ;
  109:                    ;       INTERRUPT VECTORS
  110:                    ;
  111:                    NMIV    .byte $00, $00           ; STOP VECTOR (STOP=1C00)
  112:                    RSTV    .byte $00, $00           ; RST VECTOR
  113:                    IRQV    .byte $00, $00           ; IRQ VECTOR (BRK= 1C00)
  114:                    ;
  115:                    ;
  116:                            .org $1800
  117:                    ;
  118:                    ;       INIT VOLATILE EXECUTION BLOCK
  119:                    ;       DUMP MEM TO TAPE
  120:                    ;
  121:  1800 A9 AD        DUMPT   LDA   #$AD      ; LOAD ABSOLUTE INST
  122:  1802 8D E7 17             STA   VEB
  123:  1805 20 2D 19             JSR   INTVEB
  124:                    ;
  125:  1808 A9 27                LDA   #$27      ; TURN OFF DATAIN PB5
  126:  180A 85 00                STA   SBD
  127:  180C A9 BF                LDA   #$BF      ; CONVERT PB7 TO OUTPUT
  128:  180E 85 00                STA   PBDD
  129:                    ;
  130:  1810 A2 64                LDX   #$64      ; 100 CHARS
  131:  1812 A9 16        DUMPT1  LDA   #$16      ; SYNC CHAR'S
  132:  1814 20 75 19             JSR   OUTCHT
  133:  1817 CA                   DEX
  134:  1818 D0 F8                BNE   DUMPT1
  135:                    ;
  136:                    ;
  137:  181A A9 2A                LDA   #$2A      ; START CHAR
  138:  181C 20 75 19             JSR   OUTCHT
  139:                    ;
  140:  181F AD E7 17             LDA   ID         ; OUTPUT ID
  141:  1822 20 5C 19             JSR   OUTBT
  142:                    ;
  143:  1825 AD E7 17             LDA   SAL       ; OUTPUT STARTING
  144:  1828 20 59 19             JSR   OUTBTC    ; ADDRESS
  145:  182B AD E7 17             LDA   SAH
  146:  182E 20 59 19             JSR   OUTBTC
  147:                    ;
  148:  1831 AD E8 17     DUMPT2  LDA   VEB+1     ; CHECK FOR LAST
  149:  1834 CD E7 17             CMP   EAL       ; DATA BYTE
  150:  1837 AD E9 17             LDA   VEB+2
  151:  183A ED E7 17             SBC   EAH
  152:  183D 90 24                BCC   DUMPT4
  153:                    ;
  154:  183F A9 2F                LDA   #'/      ; OUTPUT END OF DATA CHAR
  155:  1841 20 75 19             JSR   OUTCHT
  156:  1844 AD E7 17             LDA   CHKL      ; LAST BYTE HAS BEEN
  157:  1847 20 5C 19             JSR   OUTBT     ; OUT PUT   NOW OUTPUT
  158:  184A AD E7 17             LDA   CHKH      ; CHKSUM
  159:  184D 20 5C 19             JSR   OUTBT
  160:                    ;
  161:                    ;
  162:  1850 A2 02                LDX   #$02      ; 2 CHAR'S
  163:  1852 A9 04        DUMPT3  LDA   #$04      ; EOT CHAR
  164:  1854 20 75 19             JSR   OUTCHT
  165:  1857 CA                   DEX
  166:  1858 D0 F8                BNE   DUMPT3
  167:                    ;
  168:  185A A9 00                LDA   #$00      ; DISPLAY 0000
  169:  185C 85 EF                STA   POINTL    ; FOR NORMAL EXIT
  170:  185E 85 EF                STA   POINTH
  171:  1860 4C 4D 1C             JMP   START
  172:                    ;
  173:  1863 20 E7 17     DUMPT4  JSR   VEB       ; DATA BYTE OUTPUT
  174:  1866 20 59 19             JSR   OUTBTC
  175:                    ;
  176:  1869 20 D9 19             JSR   INCVEB
  177:  186C 4C 31 18             JMP   DUMPT2
  178:                    ;
  179:                    ;       LOAD MEMORY FROM TAPE
  180:                    ;
  181:                    ;
  182:                    TAB     .WORD LOAD12
  183:  186F A9 8D        LOADT   LDA   #$8D      ; INIT VOLATILE EXECUTION
  184:  1871 8D E7 17             STA   VEB       ; BLOCK WITH STA ABS.
  185:  1874 20 2D 19             JSR   INTVEB
  186:                    ;
  187:  1877 A9 4C                LDA   #$4C      ; JUMP TYPE RTRN
  188:  1879 8D EA 17             STA   VEB+3
  189:  187C AD 6F 18             LDA   TAB
  190:  187F 8D EB 17             STA   VEB+4
  191:  1882 AD 70 18             LDA   TAB+1
  192:  1885 8D EC 17             STA   VEB+5
  193:                    ;
  194:  1888 A9 07                LDA   #$07      ; RESET PB5=0 (DATA-IN)
  195:  188A 85 00                STA   SBD
  196:                    ;
  197:  188C A9 FF        SYNC    LDA   #$FF      ; CLEAR SAVX FOR SYNC CHAR
  198:  188E 8D E7 17             STA   SAVX
  199:                    ;
  200:  1891 20 30 1A     SYNC1   JSR   RDBIT     ; GET A BIT
  201:  1894 4E E7 17             LSR   SAVX      ; SHIFT BIT INTO CHAR
  202:  1897 0D E7 17             ORA   SAVX
  203:  189A 8D E7 17             STA   SAVX
  204:  189D AD E7 17             LDA   SAVX      ; GET NEW CHAR
  205:  18A0 C9 16                CMP   #$16      ; SYNC CHAR
  206:  18A2 D0 ED                BNE   SYNC1
  207:                    ;
  208:  18A4 A2 0A                LDX   #$0A      ; TEST FOR 10 SYNC CHARS
  209:  18A6 20 13 1A     SYNC2   JSR   RDCHT
  210:  18A9 C9 16                CMP   #$16
  211:  18AB D0 DF                BNE   SYNC      ; IF NOT 10 CHAR, RE-SYNC
  212:  18AD CA                   DEX
  213:  18AE D0 F6                BNE   SYNC2
  214:                    ;
  215:                    ;
  216:  18B0 20 13 1A     LOADT4  JSR   RDCHT     ; LOOK FOR START OF
  217:  18B3 C9 2A                CMP   #$2A      ; DATA CHAR
  218:  18B5 F0 06                BEQ   LOAD11
  219:  18B7 C9 16                CMP   #$16      ; IF NOT, SHOULD BE SYN
  220:  18B9 D0 D1                BNE   SYNC
  221:  18BB F0 F3                BEQ   LOADT4
  222:                    ;
  223:  18BD 20 E2 19     LOAD11  JSR   RDBYT     ; READ ID FROM TAPE
  224:  18C0 CD E7 17             CMP   ID        ; COMPARE WITH REQUESTED ID
  225:  18C3 F0 0D                BEQ   LOADT5
  226:  18C5 AD E7 17             LDA   ID        ; DEFAULT 00, READ RECORD
  227:  18C8 C9 00                CMP   #$00      ; ANYWAY
  228:  18CA F0 06                BEQ   LOADT5
  229:  18CC C9 FF                CMP   #$FF      ; DEFAULT FF, IGNORE SA ON
  230:  18CE F0 17                BEQ   LOADT6    ; TAPE
  231:  18D0 D0 9D                BNE   LOADT
  232:                    ;
  233:  18D2 20 E2 19     LOADT5  JSR   RDBYT     ; GET SA FROM TAPE
  234:  18D5 20 47 19             JSR   CHKT
  235:  18D8 8D E8 17             STA   VEB+1     ; SAVX IN VEB+1,2
  236:  18DB 20 E2 19             JSR   RDBYT
  237:  18DE 20 47 19             JSR   CHKT
  238:  18E1 8D E9 17             STA   VEB+2
  239:  18E4 4C F3 18             JMP   LOADT7
  240:                    ;
  241:  18E7 20 E2 19     LOADT6  JSR   RDBYT     ; GET SA BUT IGNORE
  242:  18EA 20 47 19             JSR   CHKT
  243:  18ED 20 E2 19             JSR   RDBYT
  244:  18F0 20 47 19             JSR   CHKT
  245:                    ;
  246:                    ;
  247:  18F3 A2 02        LOADT7  LDX   #$02      ; GET 2 CHARS
  248:  18F5 20 13 1A     LOAD13  JSR   RDCHT     ; GET CHAR (X)
  249:  18F8 C9 2F                CMP   #$2F      ; LOOK FOR LAST CHAR
  250:  18FA F0 14                BEQ   LOADT8
  251:  18FC 20 EF 19             JSR   PACKT     ; CONVERT TO HEX
  252:  18FF D0 23                BNE   LOADT9    ; Y=1 NON-HEX CHAR
  253:  1901 CA                   DEX
  254:  1902 D0 F1                BNE   LOAD13
  255:                    ;
  256:  1904 20 47 19             JSR   CHKT      ; COMPUTE CHECKSUM
  257:  1907 4C E7 17             JMP   VEB       ; SAVX DATA IN MEMORY
  258:  190A 20 D9 19     LOAD12  JSR   INCVEB    ; INCREMENT DATA POINTER
  259:  190D 4C F3 18             JMP   LOADT7
  260:                    ;
  261:  1910 20 E2 19     LOADT8  JSR   RDBYT     ; END OF DATA, COMPARE CHKSUM
  262:  1913 CD E7 17             CMP   CHKL
  263:  1916 D0 0C                BNE   LOADT9
  264:  1918 20 E2 19             JSR   RDBYT
  265:  191B CD E7 17             CMP   CHKH
  266:  191E D0 04                BNE   LOADT9
  267:  1920 A9 00                LDA   #$00      ; NORMAL EXIT
  268:  1922 F0 02                BEQ   LOAD10
  269:                    ;
  270:  1924 A9 FF        LOADT9  LDA   #$FF      ; ERROR EXIT
  271:  1926 85 EF        LOAD10  STA   POINTL
  272:  1928 85 EF                STA   POINTH
  273:  192A 4C 4D 1C             JMP   START
  274:                    ;
  275:                    ;
  276:                    ;
  277:                    ;       SUBROUTINES FOLLOW
  278:                    ;
  279:                    ;       SUB TO MOVE SA TO VEB+1,2
  280:                    ;
  281:  192D AD E7 17     INTVEB  LDA   SAL       ; MOVE SA TO VEB+1,2
  282:  1930 8D E8 17             STA   VEB+1
  283:  1933 AD E7 17             LDA   SAH
  284:  1936 8D E9 17             STA   VEB+2
  285:  1939 A9 60                LDA   #$60      ; RTS INST
  286:  193B 8D EA 17             STA   VEB+3
  287:  193E A9 00                LDA   #$00      ; CLEAR CHKSUM AREA
  288:  1940 8D E7 17             STA   CHKL
  289:  1943 8D E7 17             STA   CHKH
  290:  1946 60                   RTS
  291:                    ;
  292:                    ;       COMPUTE CHKSUM FOR TAPE LOAD
  293:                    ;       RTN USES Y TO SAVEX A
  294:                    ;
  295:  1947 A8           CHKT    TAY
  296:  1948 18                   CLC
  297:  1949 6D E7 17             ADC   CHKL
  298:  194C 8D E7 17             STA   CHKL
  299:  194F AD E7 17             LDA   CHKH
  300:  1952 69 00                ADC   #$00
  301:  1954 8D E7 17             STA   CHKH
  302:  1957 98                   TYA
  303:  1958 60                   RTS
  304:                    ;
  305:                    ;       OUTPUT ONE BYTE USE Y
  306:                    ;       TO SAVX BYTE
  307:                    ;
  308:  1959 20 47 19     OUTBTC  JSR   CHKT      ; COMPARE CHKSUM
  309:  195C A8           OUTBT   TAY             ; SAVX DATA BYTE
  310:  195D 4A                   LSR   A         ; SHIFT OFF LSD
  311:  195E 4A                   LSR   A
  312:  195F 4A                   LSR   A
  313:  1960 4A                   LSR   A
  314:  1961 20 6A 19             JSR   HEXOUT    ; OUTPUT MSD
  315:  1964 98                   TYA
  316:  1965 20 6A 19             JSR   HEXOUT    ; OUTPUT LSD
  317:  1968 98                   TYA
  318:  1969 60                   RTS
  319:                    ;
  320:                    ;       CONVERT LSD OF A TO ASCII
  321:                    ;       OUTPUT TO TAPE
  322:                    ;
  323:  196A 29 0F        HEXOUT  AND   #$0F
  324:  196C C9 0A                CMP   #$0A
  325:  196E 18                   CLC
  326:  196F 30 02                BMI   HEX1
  327:  1971 69 07                ADC   #$07
  328:  1973 69 30        HEX1    ADC   #$30
  329:                    ;
  330:                    ;       OUTPUT TO TAPE ONE ASCII
  331:                    ;       CHAR  USE SUB'S ONE + ZRO
  332:                    ;
  333:  1975 8E E7 17     OUTCHT  STX   SAVX
  334:  1978 8C E8 17             STY   SAVX+1
  335:  197B A0 08                LDY   #$08      ; START BIT
  336:  197D 20 99 19     CHT1    JSR   ONE
  337:  1980 4A                   LSR   A         ; GET DATA BIT
  338:  1981 B0 06                BCS   CHT2
  339:  1983 20 99 19             JSR   ONE       ; DATA BIT=1
  340:  1986 4C 8C 19             JMP   CHT3
  341:  1989 20 B9 19     CHT2    JSR   ZRO       ; DATA BIT=0
  342:  198C 20 B9 19     CHT3    JSR   ZRO
  343:  198F 88                   DEY
  344:  1990 D0 EB                BNE   CHT1
  345:  1992 AE E7 17             LDX   SAVX
  346:  1995 AC E8 17             LDY   SAVX+1
  347:  1998 60                   RTS
  348:                    ;
  349:                    ;
  350:                    ;       OUTPUT 1 TO TAPE
  351:                    ;       9 PULSES, 138 MICROSEC EACH
  352:                    ;
  353:  1999 A2 09        ONE     LDX   #$09
  354:  199B 48                   PHA             ; SAVX A
  355:  199C 24 00        ONE1    BIT   CLKRDI    ; WAIT FOR TIME OUT
  356:  199E 10 FC                BPL   ONE1
  357:  19A0 A9 7E                LDA   #126
  358:  19A2 85 00                STA   CLK1T
  359:  19A4 A9 A7                LDA   #$A7
  360:  19A6 85 00                STA   SBD       ; SET PB7=1
  361:  19A8 24 00        ONE2    BIT   CLKRDI
  362:  19AA 10 FC                BPL   ONE2
  363:  19AC A9 7E                LDA   #126
  364:  19AE 85 00                STA   CLK1T
  365:  19B0 A9 27                LDA   #$27
  366:  19B2 85 00                STA   SBD       ; RESET PB7=0
  367:  19B4 CA                   DEX
  368:  19B5 D0 E5                BNE   ONE1
  369:  19B7 68                   PLA
  370:  19B8 60                   RTS
  371:                    ;
  372:                    ;
  373:                    ;       OUTPUT 0 TO TAPE
  374:                    ;       6 PULSES, 207 MICROSEC EACH
  375:                    ;
  376:  19B9 A2 06        ZRO     LDX   #$06
  377:  19BB 48                   PHA             ; SAVX A
  378:  19BC 24 00        ZRO1    BIT   CLKRDI
  379:  19BE 10 FC                BPL   ZRO1
  380:  19C0 A9 C3                LDA   #$C3
  381:  19C2 85 00                STA   CLK1T
  382:  19C4 A9 A7                LDA   #$A7
  383:  19C6 85 00                STA   SBD       ; SET PB7=1
  384:  19C8 24 00        ZRO2    BIT   CLKRDI
  385:  19CA 10 FC                BPL   ZRO2
  386:  19CC A9 C3                LDA   #195
  387:  19CE 85 00                STA   CLK1T
  388:  19D0 A9 27                LDA   #$27
  389:  19D2 85 00                STA   SBD       ; RESET PB7=0
  390:  19D4 CA                   DEX
  391:  19D5 D0 E5                BNE   ZRO1
  392:  19D7 68                   PLA             ; RESTORE A
  393:  19D8 60                   RTS
  394:                    ;
  395:                    ;       SUB TO INC VEB+1,2
  396:                    ;
  397:  19D9 EE E8 17     INCVEB  INC   VEB+1
  398:  19DC D0 03                BNE   INCVE1
  399:  19DE EE E9 17             INC   VEB+2
  400:  19E1 60           INCVE1  RTS
  401:                    ;
  402:                    ;       SUB TO READ BYTE FROM TAPE
  403:                    ;
  404:  19E2 20 13 1A     RDBYT   JSR   RDCHT
  405:  19E5 20 EF 19             JSR   PACKT
  406:  19E8 20 13 1A             JSR   RDCHT
  407:  19EB 20 EF 19             JSR   PACKT
  408:  19EE 60                   RTS
  409:                    ;
  410:                    ;       PACK A=ASCII INTO SAVX
  411:                    ;       AS HEX DATA
  412:                    ;
  413:  19EF C9 30        PACKT   CMP   #$30
  414:  19F1 30 1E                BMI   PACKT3
  415:  19F3 C9 47                CMP   #$47
  416:  19F5 10 1A                BPL   PACKT3
  417:  19F7 C9 40                CMP   #$40
  418:  19F9 30 03                BMI   PACKT1
  419:  19FB 18                   CLC
  420:  19FC 69 09                ADC   #$09
  421:  19FE 2A           PACKT1  ROL   A
  422:  19FF 2A                   ROL   A
  423:  1A00 2A                   ROL   A
  424:  1A01 2A                   ROL   A
  425:  1A02 A0 04                LDY   #$04
  426:  1A04 2A           PACKT2  ROL   A
  427:  1A05 2E E7 17             ROL   SAVX
  428:  1A08 88                   DEY
  429:  1A09 D0 F9                BNE   PACKT2
  430:  1A0B AD E7 17             LDA   SAVX
  431:  1A0E A0 00                LDY   #$00      ; Y=0 VALID HEX CHAR
  432:  1A10 60                   RTS
  433:  1A11 C8           PACKT3  INY             ; Y=1 NOT HEX
  434:  1A12 60                   RTS
  435:                    ;
  436:                    ;       GET 1 CHAR FROM TAPE AND RETURN
  437:                    ;       WITH CHAR IN A  USE SAVX+1 TO ASM CHAR
  438:                    ;
  439:  1A13 8E E9 17     RDCHT   STX   SAVX+2
  440:  1A16 A2 08                LDX   #$08      ; READ 8 BITS
  441:  1A18 20 30 1A     RDCHT1  JSR   RDBIT     ; GET NEXT DATA BIT
  442:  1A1B 4E E8 17             LSR   SAVX+1    ; RIGHT SHIFT CHAR
  443:  1A1E 0D E8 17             ORA   SAVX+1    ; OR IN SIGN BIT
  444:  1A21 8D E8 17             STA   SAVX+1    ; REPLACE CHAR
  445:  1A24 CA                   DEX
  446:  1A25 D0 F1                BNE   RDCHT1
  447:                    ;
  448:  1A27 AD E8 17             LDA   SAVX+1    ; MOVE CHAR INTO A
  449:  1A2A 2A                   ROL   A         ; SHIFT OFF PARITY
  450:  1A2B 4A                   LSR   A
  451:  1A2C AE E9 17             LDX   SAVX+2
  452:  1A2F 60                   RTS
  453:                    ;
  454:                    ;       THIS SUB GETS ONE BIT FROM
  455:                    ;       TAPE AND RETURNS IT IN SIGN OF A
  456:                    ;
  457:  1A30 24 00        RDBIT   BIT   SBD       ; WAIT FOR END OF START BIT
  458:  1A32 10 FC                BPL   RDBIT
  459:  1A34 A5 00                LDA   CLKRDT    ; GET START BIT TIME
  460:  1A36 A0 FF                LDY   #$FF      ; A=256-T1
  461:  1A38 84 00                STY   CLK64T    ; SET UP TIMER
  462:                    ;
  463:  1A3A A0 14                LDY   #$14
  464:  1A3C 88           RDBIT3  DEY             ; DELAY 100 MICROSEC
  465:  1A3D D0 FD                BNE   RDBIT3
  466:                    ;
  467:  1A3F 24 00        RDBIT2  BIT   SBD
  468:  1A41 30 FC                BMI   RDBIT2    ; WAIT FOR NEXT START BIT
  469:                    
  470:  1A43 38                   SEC
  471:  1A44 E5 00                SBC   CLKRDT    ; (256-T1)-(256-T2)=T2-T1
  472:  1A46 A0 FF                LDY   #$FF
  473:  1A48 84 00                STY   CLK64T    ; SET UP TIMER FOR NEXT BIT
  474:                    
  475:  1A4A A0 07                LDY   #$07
  476:  1A4C 88           RDBIT4  DEY             ; DELAY 50 MICROSEC
  477:  1A4D D0 FD                BNE   RDBIT4
  478:                    ;
  479:  1A4F 49 FF                EOR   #$FF      ; COMPLEMENT SIGN OF A
  480:  1A51 29 80                AND   #$80      ; MASK ALL EXCEPT SIGN
  481:  1A53 60           RTS
  482:                    ;
  483:                    ;
  484:                    ;       DIAGNOSTICS
  485:                    ;          MEMORY
  486:                    ;          PLLCAL
  487:                    ;
  488:                    ;
  489:                    ;
  490:                    ;       PLLCAL OUTPUT 166 MICROSEC
  491:                    ;       PULSE STRING
  492:                    ;
  493:  1A54 A9 27        PLLCAL  LDA   #$27
  494:  1A56 85 00                STA   SBD       ; TURN OFF DATIN PB5=1
  495:  1A58 A9 BF                LDA   #$BF      ; CONVERT PB7 TO OUTPUT
  496:  1A5A 85 00                STA   PBDD
  497:                    ;
  498:  1A5C 24 00        PLL1    BIT   CLKRDI
  499:  1A5E 10 FC                BPL   PLL1
  500:  1A60 A9 9A                LDA   #154      ; WAIT 166 MICROSEC
  501:  1A62 85 00                STA   CLK1T
  502:  1A64 A9 A7                LDA   #$A7      ; OUTPUT PB7=1
  503:  1A66 85 00                STA   SBD
  504:                    ;
  505:  1A68 24 00        PLL2    BIT   CLKRDI
  506:  1A6A 10 FC                BPL   PLL2
  507:  1A6C A9 9A                LDA   #154
  508:  1A6E 85 00                STA   CLK1T
  509:  1A70 A9 27                LDA   #$27      ; PB7=0
  510:  1A72 85 00                STA   SBD
  511:  1A74 4C 5C 1A             JMP   PLL1
  512:                    ;
  513:                    ;
  514:                    ;       INTERRUPTS PAGE 27
  515:                    ;
  516:                            .ORG    $1FBA        ; RESERVED FOR TEST
  517:                    NMIP27  .WORD PLLCAL
  518:                    RSTP27  .WORD PLLCAL
  519:                    IRQP27  .WORD PLLCAL
  520:                    ;
  521:                    ;
  522:                    ;
  523:                    ;
  524:                    ;
  525:                    ;
  526:                    ;              666666  555555  333333  000000
  527:                    ;              6       5            3  0    0
  528:                    ;              6       5            3  0    0
  529:                    ;              666666  555555  333333  0    0
  530:                    ;              6    6       5       3  0    0
  531:                    ;              6    6       5       3  0    0
  532:                    ;              666666  666666  666666  000000
  533:                    ;
  534:                    ;
  535:                    ;
  536:                    ;                      000000  000000  222222
  537:                    ;                      0    0  0    0       2
  538:                    ;              ------  0    0  0    0       2
  539:                    ;              ------  0    0  0    0  222222
  540:                    ;              ------  0    0  0    0  2
  541:                    ;                      0    0  0    0  2
  542:                    ;                      000000  000000  222222
  543:                    ;
  544:                    ;
  545:                    ;
  546:                    ;
  547:                    ;
  548:                    ;          COPYRIGHT
  549:                    ;          MOS TECHNOLOGY INC.
  550:                    ;          DATE  OCT 13 1975    REV E
  551:                    ;
  552:                    ;    KIM   :TTY INTERFACE
  553:                    ;          :KEYBOARD INTERFACE
  554:                    ;          :7 SEG 6 DIGIT DISPLAY
  555:                    ;
  556:                    ;
  557:                    ;    TTY CMDS:
  558:                    ;          G   GOEXEC
  559:                    ;          CR  OPEN NEXT CELL
  560:                    ;          LF  OPEN PREV. CELL
  561:                    ;          .   MODIFY OPEN CELL
  562:                    ;          SP  OPEN NEW CELL
  563:                    ;          L   LOAD (OBJECT FORMAT)
  564:                    ;          Q   DUMP  FROM OPEN CELL ADDR TO HI LIMIT
  565:                    ;          RO  RUB OUT  - RETURN TO START  (KIM)
  566:                    ;              ((ALL ILLEGAL CHARS ARE IGNORED))
  567:                    ;
  568:                    ;    KEYBOARD COMMANDS:
  569:                    ;        ADDR  SETS MODE TO MODIFY CELL ADDRESS
  570:                    ;        DATA  SETS MODE TO MODIFY DATA IN OPEN CELL
  571:                    ;        STEP  INCREMENTS TO NEXT CELL
  572:                    ;        RST   SYSTEM RESET
  573:                    ;        RUN   GOEXEC
  574:                    ;        STOP  $1C00 CAN BE LOADED INTO NMIV TO
  575:                    ;              USE STOP FEATURE
  576:                    ;        PC    DISPLAY PC
  577:                    ;
  578:                    ;        CLOCK IS NOT DISABLED IN SIGMA 1
  579:                    ;
  580:                    ;
  581:                    ;
  582:                    ;
  583:                    ;
  584:                            .ORG    $1C00
  585:                    ;
  586:                    ;
  587:  1C00 85 EF        SAVE    STA   ACC       ; KIM ENTRY VIA STOP (NMI)
  588:  1C02 68                   PLA             ; OR BRK (IRQ)
  589:  1C03 85 EF                STA   PREG
  590:  1C05 68                   PLA             ; KIM ENTRY VIA JSR (A LOST)
  591:  1C06 85 EF                STA   PCL
  592:  1C08 85 EF                STA   POINTL
  593:  1C0A 68                   PLA
  594:  1C0B 85 EF                STA   PCH
  595:  1C0D 85 EF                STA   POINTH
  596:  1C0F 84 EF                STY   YREG
  597:  1C11 86 EF                STX   XREG
  598:  1C13 BA                   TSX
  599:  1C14 86 EF                STX   SPUSER
  600:  1C16 20 81 1E             JSR   INITS
  601:  1C19 4C 4D 1C             JMP   START
  602:                    ;
  603:  1C1C 6C E7 17     NMIT    JMP   [NMIV]    ; NON-MASKABLE INTERRUPT TRAP
  604:  1C1F 6C E7 17     IRQT    JMP   [IRQV]    ; INTERRUPT TRAP
  605:                    ;
  606:  1C22 A2 FF        RST     LDX   #$FF      ; KIM ENTRY VIA RST
  607:  1C24 9A                   TXS
  608:  1C25 86 EF                STX   SPUSER
  609:  1C27 20 81 1E             JSR   INITS
  610:                    ;
  611:                    ;
  612:  1C2A A9 FF        DETCPS  LDA   #$FF      ; COUNT START BIT
  613:  1C2C 8D E7 17             STA   CNTH30    ; ZERO CNTH30
  614:  1C2F A9 01                LDA   #$01      ; MASK HI ORDER BITS
  615:  1C31 24 00        DET1    BIT   SAD       ; TEST
  616:  1C33 D0 18                BNE   START     ; KEYBD SSW TEST
  617:  1C35 30 FA                BMI   DET1      ; START BIT TEST
  618:  1C37 A9 FC                LDA   #$FC
  619:  1C39 18           DET3    CLC             ; THIS LOOP COUNTS
  620:  1C3A 69 01                ADC   #$01      ; THE START BIT TIME
  621:  1C3C 90 03                BCC   DET2
  622:  1C3E EE E7 17             INC   CNTH30
  623:  1C41 A4 00        DET2    LDY   SAD       ; CHECK FOR END OF START BIT
  624:  1C43 10 F4                BPL   DET3
  625:  1C45 8D E7 17             STA   CNTL30
  626:  1C48 A2 08                LDX   #$08
  627:  1C4A 20 64 1E             JSR   GET5      ; GET REST OF THE CHAR, TEST CHAR
  628:                    ;
  629:                    ;
  630:                    ;
  631:                    ;
  632:                    ;
  633:                    ;
  634:                    ;       MAKE TTY/KB SELECTION
  635:                    ;
  636:  1C4D 20 85 1E     START   JSR   INIT1
  637:  1C50 A9 01                LDA   #$01
  638:  1C52 24 00                BIT   SAD
  639:  1C54 D0 1E                BNE   TTYKB
  640:  1C56 20 2A 1E             JSR   CRLF      ; PRT CR LF
  641:  1C59 A2 0A                LDX   #$0A      ; TYPE OUT KIM
  642:  1C5B 20 2C 1E             JSR   PRTST
  643:  1C5E 4C AA 1D             JMP   SHOW1
  644:                    ;
  645:  1C61 A9 00        CLEAR   LDA   #$00
  646:  1C63 85 EF                STA   INL       ; CLEAR INPUT BUFFER
  647:  1C65 85 EF                STA   INH
  648:  1C67 20 55 1E     READ    JSR   GETCH     ; GET CHAR
  649:  1C6A C9 01                CMP   #$01
  650:  1C6C F0 06                BEQ   TTYKB
  651:  1C6E 20 93 1F             JSR   PACK
  652:  1C71 4C D6 1D             JMP   SCAN
  653:                    ;
  654:                    ;       MAIN ROUTINE FOR KEY BOARD
  655:                    ;       AND DISPLAY
  656:                    ;
  657:  1C74 20 06 1F     TTYKB   JSR   SCAND     ; IF A=0 NO KEY
  658:  1C77 D0 D4                BNE   START
  659:  1C79 A9 01        TTYKB1  LDA   #$01
  660:  1C7B 24 00                BIT   SAD
  661:  1C7D F0 CE                BEQ   START
  662:  1C7F 20 06 1F             JSR   SCAND
  663:  1C82 F0 F5                BEQ   TTYKB1
  664:  1C84 20 06 1F             JSR   SCAND
  665:  1C87 F0 F0                BEQ   TTYKB1
  666:                    ;
  667:  1C89 20 51 1F     GETK    JSR   GETKEY
  668:  1C8C C9 15                CMP   #$15
  669:  1C8E 10 BD                BPL   START
  670:  1C90 C9 14                CMP   #$14
  671:  1C92 F0 44                BEQ   PCCMD     ; DISPLAY PC
  672:  1C94 C9 10                CMP   #$10      ; ADDR MODE=1
  673:  1C96 F0 2C                BEQ   ADDRM
  674:  1C98 C9 11                CMP   #$11      ; DATA MODE=1
  675:  1C9A F0 2C                BEQ   DATAM
  676:  1C9C C9 12                CMP   #$12      ; STEP
  677:  1C9E F0 2F                BEQ   STEP
  678:  1CA0 C9 13                CMP   #$13      ; RUN
  679:  1CA2 F0 31                BEQ   GOV
  680:  1CA4 0A           DATA    ASL   A         ; SHIFT CHAR INTO HIGH
  681:  1CA5 0A                   ASL   A         ; ORDER NIBBLE
  682:  1CA6 0A                   ASL   A
  683:  1CA7 0A                   ASL   A
  684:  1CA8 85 EF                STA   TEMP      ; STORE IN TEMP
  685:  1CAA A2 04                LDX   #$04
  686:  1CAC A4 EF        DATA1   LDY   MODE      ; TEST MODE 1=ADDR
  687:  1CAE D0 0A                BNE   ADDR      ; MODE=0 DATA
  688:  1CB0 B1 EF                LDA   [POINTL],Y ; GET DATA
  689:  1CB2 06 EF                ASL   TEMP      ; SHIFT CHAR
  690:  1CB4 2A                   ROL   A         ; SHIFT DATA
  691:  1CB5 91 EF                STA   [POINTL],Y ; STORE OUT DATA
  692:  1CB7 4C BF 1C             JMP   DATA2
  693:                    ;
  694:  1CBA 0A           ADDR    ASL   A         ; SHIFT CHAR
  695:  1CBB 26 EF                ROL   POINTL    ; SHIFT ADDR
  696:  1CBD 26 EF                ROL   POINTH    ; SHIFT ADDR HI
  697:  1CBF CA           DATA2   DEX
  698:  1CC0 D0 EA                BNE   DATA1     ; DO 4 TIMES
  699:  1CC2 F0 08                BEQ   DATAM2    ; EXIT HERE
  700:                    ;
  701:  1CC4 A9 01        ADDRM   LDA   #$01
  702:  1CC6 D0 02                BNE   DATAM1
  703:                    ;
  704:  1CC8 A9 00        DATAM   LDA   #$00
  705:  1CCA 85 EF        DATAM1  STA   MODE
  706:  1CCC 4C 4D 1C     DATAM2  JMP   START
  707:                    ;
  708:  1CCF 20 4A 1F     STEP    JSR   INCPT
  709:  1CD2 4C 4D 1C             JMP   START
  710:                    ;
  711:  1CD5 4C C3 1D     GOV     JMP   GOEXEC
  712:                    ;
  713:                    ;
  714:                    ;       DISPLAY PC BY MOVING
  715:                    ;       PC TO POINT
  716:                    ;
  717:  1CD8 A5 EF        PCCMD   LDA   PCL
  718:  1CDA 85 EF                STA   POINTL
  719:  1CDC A5 EF                LDA   PCH
  720:  1CDE 85 EF                STA   POINTH
  721:  1CE0 4C 4D 1C             JMP   START
  722:                    ;
  723:                    ;       LOAD PAPER TAPE FROM TTY
  724:                    ;
  725:  1CE3 20 55 1E     LOAD    JSR   GETCH     ; LOOK FOR FIRST CHAR
  726:  1CE6 C9 3B                CMP   #$3B      ; SMICOLON
  727:  1CE8 D0 F9                BNE   LOAD
  728:  1CEA A9 00                LDA   #$00
  729:  1CEC 85 EF                STA   CHKSUM
  730:  1CEE 85 EF                STA   CHKHI
  731:                    ;
  732:  1CF0 20 84 1F             JSR   GETBYT    ; GET BYTE CNT
  733:  1CF3 AA                   TAX             ; SAVE IN X INDEX
  734:  1CF4 20 78 1F             JSR   CHK       ; COMPUTE CHKSUM
  735:                    ;
  736:  1CF7 20 84 1F             JSR   GETBYT    ; GET ADDRESS HI
  737:  1CFA 85 EF                STA   POINTH
  738:  1CFC 20 78 1F             JSR   CHK
  739:  1CFF 20 84 1F             JSR   GETBYT    ; GET ADDRESS LO
  740:  1D02 85 EF                STA   POINTL
  741:  1D04 20 78 1F             JSR   CHK
  742:                    ;
  743:  1D07 8A                   TXA             ; IF CNT=0 DONT
  744:  1D08 F0 0F                BEQ   LOAD3     ; GET ANY DATA
  745:                    ;
  746:  1D0A 20 84 1F     LOAD2   JSR   GETBYT    ; GET DATA
  747:  1D0D 91 EF                STA   [POINTL],Y ; STORE DATA
  748:  1D0F 20 78 1F             JSR   CHK
  749:  1D12 20 4A 1F             JSR   INCPT     ; NEXT ADDRESS
  750:  1D15 CA                   DEX
  751:  1D16 D0 F2                BNE   LOAD2
  752:  1D18 E8                   INX             ; X=1 DATA RECORD
  753:                    ;                       ; X=0 LAST RECORD
  754:  1D19 20 84 1F     LOAD3   JSR   GETBYT    ; COMPARE CHKSUM
  755:  1D1C C5 EF                CMP   CHKHI
  756:  1D1E D0 16                BNE   LOADE1
  757:  1D20 20 84 1F             JSR   GETBYT
  758:  1D23 C5 EF                CMP   CHKSUM
  759:  1D25 D0 12                BNE   LOADER
  760:                    ;
  761:  1D27 8A                   TXA             ; X=0 LAST RECORD
  762:  1D28 D0 B9                BNE   LOAD
  763:                    ;
  764:  1D2A A2 0C        LOAD7   LDX   #$0C      ; X-OFF KIM
  765:  1D2C A9 27        LOAD8   LDA   #$27
  766:  1D2E 85 00                STA   SBD       ; DISABLE DATA IN
  767:  1D30 20 2C 1E             JSR   PRTST
  768:  1D33 4C 4D 1C             JMP   START
  769:                    ;
  770:  1D36 20 84 1F     LOADE1  JSR   GETBYT    ; DUMMY
  771:  1D39 A2 11        LOADER  LDX   #$11      ; X-OFF ERR KIM
  772:  1D3B D0 EF                BNE   LOAD8
  773:                    ;
  774:                    ;       DUMP TO TTY
  775:                    ;       FROM OPEN CELL ADDRESS
  776:                    ;       TO LIMHL,LIMHH
  777:                    ;
  778:  1D3D A9 00        DUMP    LDA   #$00
  779:  1D3F 85 EF                STA   INL
  780:  1D41 85 EF                STA   INH       ; CLEAR RECORD COUNT
  781:  1D43 A9 00        DUMP0   LDA   #$00
  782:  1D45 85 EF                STA   CHKHI     ; CLEAR CHKSUM
  783:  1D47 85 EF                STA   CHKSUM
  784:                    ;
  785:  1D49 20 2A 1E             JSR   CRLF      ; PRINT CR LF
  786:  1D4C A9 3B                LDA   #$3B      ; PRINT SEMICOLON
  787:  1D4E 20 96 1E             JSR   OUTCH
  788:  1D51 A5 EF                LDA   POINTL    ; TEST POINT GT OR ET
  789:  1D53 CD E7 17             CMP   EAL       ; HI LIMIT GOTO EXIT
  790:  1D56 A5 EF                LDA   POINTH
  791:  1D58 ED E7 17             SBC   EAH
  792:  1D5B 90 18                BCC   DUMP4
  793:                    ;
  794:  1D5D A9 00                LDA   #$00      ; PRINT LAST RECORD
  795:  1D5F 20 36 1E             JSR   PRTBYT    ; 0 BYTES
  796:  1D62 20 B3 1F             JSR   OPEN
  797:  1D65 20 19 1E             JSR   PRTPNT
  798:                    ;
  799:  1D68 A5 EF                LDA   CHKHI     ; PRINT CHKSUM
  800:  1D6A 20 36 1E             JSR   PRTBYT    ; FOR LAST RECORD
  801:  1D6D A5 EF                LDA   CHKSUM
  802:  1D6F 20 36 1E             JSR   PRTBYT
  803:  1D72 4C 61 1C             JMP   CLEAR
  804:                    ;
  805:  1D75 A9 18        DUMP4   LDA   #$18      ; PRINT 24 BYTE COUNT
  806:  1D77 AA                   TAX             ; SAVE AS INDEX
  807:  1D78 20 36 1E             JSR   PRTBYT
  808:  1D7B 20 78 1F             JSR   CHK
  809:  1D7E 20 19 1E             JSR   PRTPNT
  810:                    ;
  811:  1D81 A0 00        DUMP2   LDY   #$00      ; PRINT 24 BYTES
  812:  1D83 B1 EF                LDA   [POINTL],Y ; GET DATA
  813:  1D85 20 36 1E             JSR   PRTBYT    ; PRINT DATA
  814:  1D88 20 78 1F             JSR   CHK       ; COMPUTE CHKSUM
  815:  1D8B 20 4A 1F             JSR   INCPT     ; INCREMENT POINT
  816:  1D8E CA                   DEX
  817:  1D8F D0 F0                BNE   DUMP2
  818:                    ;
  819:  1D91 A5 EF                LDA   CHKHI     ; PRINT CHKSUM
  820:  1D93 20 36 1E             JSR   PRTBYT
  821:  1D96 A5 EF                LDA   CHKSUM
  822:  1D98 20 36 1E             JSR   PRTBYT
  823:  1D9B E6 EF                INC   INL       ; INCR RECORD COUNT
  824:  1D9D D0 02                BNE   DUMP3
  825:  1D9F E6 EF                INC   INH
  826:  1DA1 4C 43 1D     DUMP3   JMP   DUMP0
  827:                    ;
  828:  1DA4 20 B3 1F     SPACE   JSR   OPEN      ; OPEN NEW CELL
  829:  1DA7 20 2A 1E     SHOW    JSR   CRLF      ; PRINT CR LF
  830:  1DAA 20 19 1E     SHOW1   JSR   PRTPNT
  831:  1DAD 20 94 1E             JSR   OUTSP     ; PRINT SPACE
  832:  1DB0 A0 00                LDY   #$00      ; PRINT DATA SPECIFIED
  833:  1DB2 B1 EF                LDA   [POINTL],Y ; BY POINT AD=LDA EXT
  834:  1DB4 20 36 1E             JSR   PRTBYT
  835:  1DB7 20 94 1E             JSR   OUTSP     ; PRINT SPACE
  836:  1DBA 4C 61 1C             JMP   CLEAR
  837:                    ;
  838:  1DBD 20 4A 1F     RTRN    JSR   INCPT     ; OPEN NEXT CELL
  839:  1DC0 4C A7 1D             JMP   SHOW
  840:                    ;
  841:  1DC3 A6 EF        GOEXEC  LDX   SPUSER
  842:  1DC5 9A                   TXS
  843:  1DC6 A5 EF                LDA   POINTH    ; PROGRAM RUNS FROM
  844:  1DC8 48                   PHA             ; OPEN CELL ADDRESS
  845:  1DC9 A5 EF                LDA   POINTL
  846:  1DCB 48                   PHA
  847:  1DCC A5 EF                LDA   PREG
  848:  1DCE 48                   PHA
  849:  1DCF A6 EF                LDX   XREG      ; RESTORE REGS
  850:  1DD1 A4 EF                LDY   YREG
  851:  1DD3 A5 EF                LDA   ACC
  852:  1DD5 40                   RTI
  853:                    ;
  854:  1DD6 C9 20        SCAN    CMP   #$20      ; OPEN CELL
  855:  1DD8 F0 CA                BEQ   SPACE
  856:  1DDA C9 7F                CMP   #$7F      ; RUB OUT (KIM)
  857:  1DDC F0 1B                BEQ   STV
  858:  1DDE C9 0D                CMP   #$0D      ; NEXT CELL
  859:  1DE0 F0 DB                BEQ   RTRN
  860:  1DE2 C9 0A                CMP   #$0A      ; PREV CELL
  861:  1DE4 F0 1C                BEQ   FEED
  862:  1DE6 C9 2E                CMP   #'.'      ; MODIFY CELL
  863:  1DE8 F0 26                BEQ   MODIFY
  864:  1DEA C9 47                CMP   #'G'      ; GO EXEC
  865:  1DEC F0 D5                BEQ   GOEXEC
  866:  1DEE C9 51                CMP   #'Q'      ; DUMP FROM OPEN CELL TO HI LIMIT
  867:  1DF0 F0 0A                BEQ   DUMPV
  868:  1DF2 C9 4C                CMP   #'L'      ; LOAD TAPE
  869:  1DF4 F0 09                BEQ   LOADV
  870:  1DF6 4C 67 1C             JMP   READ      ; IGNORE ILLEGAL CHAR
  871:                    ;
  872:  1DF9 4C 4D 1C     STV     JMP   START
  873:  1DFC 4C 3D 1D     DUMPV   JMP   DUMP
  874:  1DFF 4C E3 1C     LOADV   JMP   LOAD
  875:                    ;
  876:  1E02 38           FEED    SEC
  877:  1E03 A5 EF                LDA   POINTL    ; DEC DOUBLE BYTE
  878:  1E05 E9 01                SBC   #$01      ; AT POINTL AND POINTH
  879:  1E07 85 EF                STA   POINTL
  880:  1E09 B0 02                BCS   FEED1
  881:  1E0B C6 EF                DEC   POINTH
  882:  1E0D 4C A7 1D     FEED1   JMP   SHOW
  883:                    ;
  884:  1E10 A0 00        MODIFY  LDY   #$00      ; GET CONTENTS OF INPUT BUFF
  885:  1E12 A5 EF                LDA   INL       ; INL AND STORE IN LOC
  886:  1E14 91 EF                STA   [POINTL],Y ; SPECIFIED BY POINT
  887:  1E16 4C BD 1D             JMP   RTRN
  888:                    ;
  889:                    ;       END OF MAIN LINE
  890:                    ;
  891:                    ;       SUBROUTINES FOLLOW
  892:                    ;
  893:                    ;
  894:                    ;
  895:                    ;       SUB TO PRINT POINTL,POINTH
  896:                    ;
  897:  1E19 A5 EF        PRTPNT  LDA   POINTH
  898:  1E1B 20 36 1E             JSR   PRTBYT
  899:  1E1E 20 78 1F             JSR   CHK
  900:  1E21 A5 EF                LDA   POINTL
  901:  1E23 20 36 1E             JSR   PRTBYT
  902:  1E26 20 78 1F             JSR   CHK
  903:  1E29 60                   RTS
  904:                    ;
  905:                    ;       PRINT STRING OF ASCII CHARS FROM
  906:                    ;       TOP+X TO TOP
  907:                    ;
  908:  1E2A A2 07        CRLF    LDX   #$07
  909:  1E2C BD BC 1F     PRTST   LDA   TOP,X
  910:  1E2F 20 96 1E             JSR   OUTCH
  911:  1E32 CA                   DEX
  912:  1E33 10 F7                BPL   PRTST     ; STOP ON INDEX ZERO
  913:  1E35 60                   RTS
  914:                    ;
  915:                    ;       PRINT 1 HEX BYTE AS TWO ASCII CHAR'S
  916:                    ;
  917:  1E36 85 EF        PRTBYT  STA   TEMP
  918:  1E38 4A                   LSR   A         ; SHIFT CHAR RIGHT 4 BITS
  919:  1E39 4A                   LSR   A
  920:  1E3A 4A                   LSR   A
  921:  1E3B 4A                   LSR   A
  922:  1E3C 20 47 1E             JSR   HEXTA     ; CONVERT TO HEX AND PRINT
  923:  1E3F A5 EF                LDA   TEMP      ; GET OTHER HALF
  924:  1E41 20 47 1E             JSR   HEXTA     ; CONVERT TO HEX AND PRINT
  925:  1E44 A5 EF                LDA   TEMP      ; RESTORE BYTE IN A AND RETURN
  926:  1E46 60                   RTS
  927:                    ;
  928:  1E47 29 0F        HEXTA   AND   #$0F      ; MASK HI 4 BITS
  929:  1E49 C9 0A                CMP   #$0A
  930:  1E4B 18                   CLC
  931:  1E4C 30 02                BMI   HEXTA1
  932:  1E4E 69 07                ADC   #$07      ; ALPHA HEX
  933:  1E50 69 30        HEXTA1  ADC   #$30      ; DEC HEX
  934:  1E52 4C 96 1E             JMP   OUTCH     ; PRINT CHAR
  935:                    ;
  936:                    ;       GET 1 CHAR FROM TTY
  937:                    ;       CHAR IN A
  938:                    ;       X IS PRESERVED AND Y RETURNED = FF
  939:                    ;
  940:  1E55 86 EF        GETCH   STX   TMPX      ; SAVE X REG
  941:  1E57 A2 08                LDX   #$08      ; SET UP 8-BIT CNT
  942:  1E59 A9 01                LDA   #$01
  943:  1E5B 24 00        GET1    BIT   SAD
  944:  1E5D D0 21                BNE   GET6
  945:  1E5F 30 FA                BMI   GET1      ; WAIT FOR START BIT
  946:  1E61 20 C4 1E             JSR   DELAY     ; DELAY 1 BIT
  947:  1E64 20 DB 1E     GET5    JSR   DEHALF    ; DELAY 1/2 BIT TIME
  948:  1E67 A5 00        GET2    LDA   SAD       ; GET 8 BITS
  949:  1E69 29 80                AND   #$80      ; MASK OFF LOW ORDER BITS
  950:  1E6B 46 EF                LSR   CHAR      ; SHIFT RIGHT CHAR
  951:  1E6D 05 EF                ORA   CHAR
  952:  1E6F 85 EF                STA   CHAR
  953:  1E71 20 C4 1E             JSR   DELAY     ; DELAY 1 BIT TIME
  954:  1E74 CA                   DEX
  955:  1E75 D0 F0                BNE   GET2      ; GET NEXT CHAR
  956:  1E77 20 DB 1E             JSR   DEHALF    ; EXIT THIS RTN
  957:                    ;
  958:  1E7A A6 EF                LDX   TMPX
  959:  1E7C A5 EF                LDA   CHAR
  960:  1E7E 2A                   ROL   A         ; SHIFT OFF PARITY
  961:  1E7F 4A                   LSR   A
  962:  1E80 60           GET6    RTS
  963:                    ;
  964:                    ;       INITIALIZATION FOR SIGMA
  965:                    ;
  966:  1E81 A2 01        INITS   LDX   #$01      ; SET KB MODE TO ADDR
  967:  1E83 86 EF                STX   MODE
  968:                    ;
  969:  1E85 A2 00        INIT1   LDX   #$00
  970:  1E87 86 00                STX   PADD      ; FOR SIGMA USE SADD
  971:  1E89 A2 3F                LDX   #$3F
  972:  1E8B 86 00                STX   PBDD      ; FOR SIGMA USE SBDD
  973:  1E8D A2 07                LDX   #$07      ; ENABLE DATA IN
  974:  1E8F 86 00                STX   SBD       ; OUTPUT
  975:  1E91 D8                   CLD
  976:  1E92 78                   SEI
  977:  1E93 60                   RTS
  978:                    ;
  979:                    ;       PRINT 1 CHAR   CHAR IN A
  980:                    ;       X IS PRESERVED  Y RETURNED = FF
  981:                    ;       OUTSP   PRINTS 1 SPACE
  982:                    ;
  983:  1E94 A9 20        OUTSP   LDA   #$20
  984:  1E96 85 EF        OUTCH   STA   CHAR
  985:  1E98 86 EF                STX   TMPX
  986:  1E9A 20 C4 1E             JSR   DELAY     ; 10/11 BIT CODE SYNC
  987:  1E9D A5 00                LDA   SBD       ; START BIT
  988:  1E9F 29 FE                AND   #$FE
  989:  1EA1 85 00                STA   SBD
  990:  1EA3 20 C4 1E             JSR   DELAY
  991:  1EA6 A2 08                LDX   #$08
  992:  1EA8 A5 00        OUT1    LDA   SBD       ; DATA BIT
  993:  1EAA 29 FE                AND   #$FE
  994:  1EAC 46 EF                LSR   CHAR
  995:  1EAE 69 00                ADC   #$00
  996:  1EB0 85 00                STA   SBD
  997:  1EB2 20 C4 1E             JSR   DELAY
  998:  1EB5 CA                   DEX
  999:  1EB6 D0 F0                BNE   OUT1
 1000:  1EB8 A5 00                LDA   SBD       ; STOP BIT
 1001:  1EBA 09 01                ORA   #$01
 1002:  1EBC 85 00                STA   SBD
 1003:  1EBE 20 C4 1E             JSR   DELAY     ; STOP BIT
 1004:  1EC1 A6 EF                LDX   TMPX      ; RESTORE INDEX
 1005:  1EC3 60                   RTS
 1006:                    ;
 1007:                    ;       DELAY 1 BIT TIME
 1008:                    ;       AS DETERMEND BY DETCPS
 1009:                    ;
 1010:  1EC4 AD E7 17     DELAY   LDA   CNTH30    ; THIS LOOP SIMULATES
 1011:  1EC7 8D E7 17             STA   TIMH      ; DETCPS SECTION AND WILL DELAY
 1012:  1ECA AD E7 17             LDA   CNTL30    ; 1 BIT TIME
 1013:  1ECD 38           DE2     SEC
 1014:  1ECE E9 01        DE4     SBC   #$01
 1015:  1ED0 B0 03                BCS   DE3
 1016:  1ED2 CE E7 17             DEC   TIMH
 1017:  1ED5 AC E7 17     DE3     LDY   TIMH
 1018:  1ED8 10 F3                BPL   DE2
 1019:  1EDA 60                   RTS
 1020:                    ;
 1021:                    ;                         DELAY 1/2 BIT TIME
 1022:  1EDB AD E7 17     DEHALF  LDA   CNTH30    ; DOUBLE RIGHT SHIFT OF DELAY
 1023:  1EDE 8D E7 17             STA   TIMH      ; CONSTANT FOR A DIV BY 2
 1024:  1EE1 AD E7 17             LDA   CNTL30
 1025:  1EE4 4A                   LSR   A
 1026:  1EE5 4E E7 17             LSR   TIMH
 1027:  1EE8 90 E3                BCC   DE2
 1028:  1EEA 09 80                ORA   #$80
 1029:  1EEC B0 E0                BCS   DE4
 1030:                    ;
 1031:                    ;       SUB TO DETERMINE IF KEY IS
 1032:                    ;       DEPRESSED OR CONDITION OF SSW
 1033:                    ;             KEY NOT DEP OR TTY MODE    A = 0
 1034:                    ;             KEY DEP OR KB MODE      A NOT ZERO
 1035:                    ;
 1036:                    ;
 1037:  1EEE A0 03        AK      LDY   #$03      ; 3 ROWS
 1038:  1EF0 A2 01                LDX   #$01      ; DIGIT 0
 1039:                    ;
 1040:  1EF2 A9 FF        ONEKEY  LDA   #$FF
 1041:  1EF4 86 00        AK1     STX   SBD       ; OUTPUT DIGIT
 1042:  1EF6 E8                   INX             ; GET NEXT DIGIT
 1043:  1EF7 E8                   INX
 1044:  1EF8 25 00                AND   SAD       ; INPUT SEGMENTS
 1045:  1EFA 88                   DEY
 1046:  1EFB D0 F7                BNE   AK1
 1047:                    ;
 1048:  1EFD A0 07                LDY   #$07
 1049:  1EFF 84 00                STY   SBD
 1050:                    ;
 1051:  1F01 09 80                ORA   #$80
 1052:  1F03 49 FF                EOR   #$FF
 1053:  1F05 60                   RTS
 1054:                    ;
 1055:                    ;       SUB  OUTPUT TO 7-SEGMENT DISPLAY
 1056:                    ;
 1057:  1F06 A0 00        SCAND   LDY   #$00      ; GET DATA SPECIFIED
 1058:  1F08 B1 EF                LDA   [POINTL],Y ; BY POINT
 1059:  1F0A 85 EF                STA   INH       ; SET UP DISPLAY BUFFER
 1060:  1F0C A9 7F        SCANDS  LDA   #$7F      ; CHANGE SEG
 1061:  1F0E 85 00                STA   PADD      ; TO OUTPUT
 1062:                    ;
 1063:  1F10 A2 09                LDX   #$09      ; INIT DIGIT NUMBER
 1064:  1F12 A0 03                LDY   #$03      ; OUTPUT 3 BYTES
 1065:                    ;
 1066:  1F14 B9 EF 00     SCAND1  LDA   INL,Y     ; GET BYTE
 1067:  1F17 4A                   LSR   A         ; GET MSD
 1068:  1F18 4A                   LSR   A
 1069:  1F19 4A                   LSR   A
 1070:  1F1A 4A                   LSR   A
 1071:  1F1B 20 32 1F             JSR   CONVD     ; OUTPUT CHAR
 1072:  1F1E B9 EF 00             LDA   INL,Y     ; GET BYTE AGAIN
 1073:  1F21 29 0F                AND   #$0F      ; GET LSD
 1074:  1F23 20 32 1F             JSR   CONVD     ; OUTPUT CHAR
 1075:  1F26 88                   DEY             ; SET UP FOR NXT BYTE
 1076:  1F27 D0 EB                BNE   SCAND1
 1077:  1F29 86 00                STX   SBD       ; ALL DIGITS OFF
 1078:  1F2B A9 00                LDA   #$00      ; CHANGE SEGMENT
 1079:  1F2D 85 00                STA   PADD      ; TO INPUTS
 1080:  1F2F 4C EE 1E             JMP   AK        ; GET ANY KEY
 1081:                    ;
 1082:                    ;       CONVERT AND DISPLAY HEX
 1083:                    ;       USED BY SCAND ONLY
 1084:                    ;
 1085:  1F32 84 EF        CONVD   STY   TEMP      ; SAVE Y
 1086:  1F34 A8                   TAY             ; USE CHAR AS INDEX
 1087:  1F35 B9 BC 1F             LDA   TABLE,Y   ; LOOKUP CONVERSION
 1088:  1F38 A0 00                LDY   #$00      ; TURN OFF SEGMENTS
 1089:  1F3A 84 00                STY   SAD
 1090:  1F3C 86 00                STX   SBD       ; OUTPUT DIGIT ENABLE
 1091:  1F3E 85 00                STA   SAD       ; OUT PUT SEGMENTS
 1092:                    ;
 1093:  1F40 A0 7F                LDY   #$7F      ; DELAY 500 CYCLES APPROX.
 1094:  1F42 88           CONVD1  DEY
 1095:  1F43 D0 FD                BNE   CONVD1
 1096:                    ;
 1097:  1F45 E8                   INX             ; GET NEXT DIGIT NUMBER
 1098:  1F46 E8                   INX             ; ADD 2
 1099:  1F47 A4 EF                LDY   TEMP      ; RESTORE Y
 1100:  1F49 60                   RTS
 1101:                    ;
 1102:                    ;       SUB TO INCREMENT POINT
 1103:                    ;
 1104:  1F4A E6 EF        INCPT   INC   POINTL
 1105:  1F4C D0 02                BNE   INCPT2
 1106:  1F4E E6 EF                INC   POINTH
 1107:  1F50 60                   INCPT2  RTS
 1108:                    ;
 1109:                    ;       GET KEY FROM KEY BOARD
 1110:                    ;       RETURN WITH A=KEY VALUE
 1111:                    ;       GT. 15 THEN ILLEGAL OR NO KEY
 1112:                    ;
 1113:                    ;
 1114:  1F51 A2 21        GETKEY  LDX   #$21      ; START AT DIGIT 0
 1115:  1F53 A0 01        GETKE5  LDY   #$01      ; GET 1 ROW
 1116:  1F55 20 F2 1E             JSR   ONEKEY
 1117:  1F58 D0 07                BNE   KEYIN     ; A=0 NO KEY
 1118:  1F5A E0 27                CPX   #$27      ; TEST FOR DIGIT 2
 1119:  1F5C D0 F5                BNE   GETKE5
 1120:  1F5E A9 15                LDA   #$15      ; 15=NOKEY
 1121:  1F60 60                   RTS
 1122:  1F61 A0 FF        KEYIN   LDY   #$FF
 1123:  1F63 0A           KEYIN1  ASL   A         ; SHIFT LEFT
 1124:  1F64 B0 03                BCS   KEYIN2    ; UNTIL Y=KEY NUM
 1125:  1F66 C8                   INY
 1126:  1F67 10 FA                BPL   KEYIN1
 1127:  1F69 8A           KEYIN2  TXA
 1128:  1F6A 29 0F                AND   #$0F      ; MASK MSD
 1129:  1F6C 4A                   LSR   A         ; DIVIDE BY 2
 1130:  1F6D AA                   TAX
 1131:  1F6E 98                   TYA
 1132:  1F6F 10 03                BPL   KEYIN4
 1133:  1F71 18           KEYIN3  CLC
 1134:  1F72 69 07                ADC   #$07      ; MULT (X-1) TIMES A
 1135:  1F74 CA           KEYIN4  DEX
 1136:  1F75 D0 FA                BNE   KEYIN3
 1137:  1F77 60                   RTS
 1138:                    ;
 1139:                    ;       SUB TO COMPUTE CHECK SUM
 1140:                    ;
 1141:  1F78 18           CHK     CLC
 1142:  1F79 65 EF                ADC   CHKSUM
 1143:  1F7B 85 EF                STA   CHKSUM
 1144:  1F7D A5 EF                LDA   CHKHI
 1145:  1F7F 69 00                ADC   #$00
 1146:  1F81 85 EF                STA   CHKHI
 1147:  1F83 60                   RTS
 1148:                    ;
 1149:                    ;       GET 2 HEX CHAR'S AND PACK
 1150:                    ;       INTO INL AND INH
 1151:                    ;       X PRESERVED  Y RETURNED = 0
 1152:                    ;       NON HEX CHAR WILL BE LOADED AS NEAREST HEX EQU
 1153:                    ;
 1154:  1F84 20 55 1E     GETBYT  JSR   GETCH
 1155:  1F87 20 93 1F             JSR   PACK
 1156:  1F8A 20 55 1E             JSR   GETCH
 1157:  1F8D 20 93 1F             JSR   PACK
 1158:  1F90 A5 EF                LDA   INL
 1159:  1F92 60                   RTS
 1160:                    ;
 1161:                    ;       SHIFT CHAR IN A INTO
 1162:                    ;       INL AND INH
 1163:                    ;
 1164:  1F93 C9 30        PACK    CMP   #$30      ; CHECK FOR HEX
 1165:  1F95 30 1B                BMI   UPDAT2
 1166:  1F97 C9 47                CMP   #$47      ; NOT HEX EXIT
 1167:  1F99 10 17                BPL   UPDAT2
 1168:  1F9B C9 40                CMP   #$40      ; CONVERT TO HEX
 1169:  1F9D 30 03                BMI   UPDATE
 1170:  1F9F 18                   CLC
 1171:  1FA0 69 09                ADC   #$09
 1172:  1FA2 2A           UPDATE  ROL   A
 1173:  1FA3 2A                   ROL   A
 1174:  1FA4 2A                   ROL   A
 1175:  1FA5 2A                   ROL   A
 1176:  1FA6 A0 04                LDY   #$04      ; SHIFT INTO I/O BUFFER
 1177:  1FA8 2A           UPDAT1  ROL   A
 1178:  1FA9 26 EF                ROL   INL
 1179:  1FAB 26 EF                ROL   INH
 1180:  1FAD 88                   DEY
 1181:  1FAE D0 F8                BNE   UPDAT1
 1182:  1FB0 A9 00                LDA   #$00      ; A=0 IF HEX NUM
 1183:  1FB2 60           UPDAT2  RTS
 1184:                    ;
 1185:  1FB3 A5 EF        OPEN    LDA   INL       ; MOVE I/O BUFFER TO POINT
 1186:  1FB5 85 EF                STA   POINTL
 1187:  1FB7 A5 EF                LDA   INH       ; TRANSFER INH- POINTH
 1188:  1FB9 85 EF                STA   POINTH
 1189:  1FBB 60                   RTS
 1190:                    ;
 1191:                    ;
 1192:                    ;       END OF SUBROUTINES
 1193:                    ;
 1194:                    ;
 1195:                    ;       TABLES
 1196:                    ;
 1197:                    TOP     .BYTE   $00, $00, $00, $00, $00, $00, $0A, $0D, "MIK", " ", $13, "RRE", " ", $13
 1198:                    ;
 1199:                    ;               TABLE HEX TO 7 SEGMENT
 1200:                    ;               0    1    2    3    4    5    6    7
 1201:                    TABLE   .BYTE   $BF, $86, $DB, $CF, $E6, $ED, $FD, $87
 1202:                    
 1203:                    ;               8    9    A    B    C    D    E    F
 1204:                            .BYTE   $FF, $EF, $F7, $FC, $B9, $DE, $F9, $F1
 1205:                    ;
 1206:                    ;
 1207:                    ;
 1208:                    ;
 1209:                    ;
 1210:                    ;       INTERRUPT VECTORS
 1211:                    ;
 1212:                            .ORG    $1FFA
 1213:                    NMIENT  .WORD   NMIT
 1214:                    RSTENT  .WORD   RST
 1215:                    IRQENT  .WORD   IRQT
 1216:                            .END
 1217:                    
